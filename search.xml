<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>员工管理系统springboot+mybatis</title>
      <link href="/xhnb.github.io/2020/09/27/%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Fspringboot-mybatis/"/>
      <url>/xhnb.github.io/2020/09/27/%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Fspringboot-mybatis/</url>
      
        <content type="html"><![CDATA[<p>项目是一个简单的员工管理系统，适合初学springboot的人入门练手，有简单的增删改查，也有分页查询，复杂条件模糊查询等一些功能，麻雀虽小，但五脏六全，哈哈哈…..博客尾部会附上源码，现在主要分析一下功能思路！</p><h4 id="1-项目展示"><a href="#1-项目展示" class="headerlink" title="1. 项目展示"></a>1. 项目展示</h4><p><strong>1.1 登录功能</strong><br><img src="https://img-blog.csdnimg.cn/20200526165745922.gif" alt="login"></p><blockquote><ul><li>使用拦截器技术，达到必须登录才能访问，会提示”对不起，您尚未登录”的提示信息</li></ul></blockquote><p><strong>1.2 添加员工功能</strong><br><img src="https://img-blog.csdnimg.cn/20200526170221751.gif" alt="add"><br><strong>1.3 删除员工功能</strong><br><img src="https://img-blog.csdnimg.cn/2020052617045144.gif" alt="在这里插入图片描述"></p><blockquote><ul><li>可以删除一个，也可以批量删除，全选</li></ul></blockquote><p><strong>1.4 更新员工功能</strong><br><img src="https://img-blog.csdnimg.cn/20200526170726476.gif" alt="在这里插入图片描述"></p><blockquote><ul><li>点击编辑员工信息，会回显员工信息，进而再来修改</li></ul></blockquote><p><strong>1.5 分页查询</strong><br><img src="https://img-blog.csdnimg.cn/20200526170903444.gif" alt="在这里插入图片描述"></p><p><strong>1.6 复杂条件模糊查询</strong><br><img src="https://img-blog.csdnimg.cn/20200526171211311.gif" alt="在这里插入图片描述"></p><h4 id="2-功能详解"><a href="#2-功能详解" class="headerlink" title="2.功能详解"></a>2.功能详解</h4><h5 id="2-1-登录功能"><a href="#2-1-登录功能" class="headerlink" title="2.1 登录功能"></a>2.1 登录功能</h5><p>关于登录功能更详细的参考这篇<a href="https://blog.csdn.net/weixin_44757206/article/details/106295724">博客</a></p><h5 id="2-2-删除功能"><a href="#2-2-删除功能" class="headerlink" title="2.2 删除功能"></a>2.2 删除功能</h5><p><strong>单个删除：</strong> 给删除按钮绑定单击事件，带上员工的id参数，就可以删除</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>删除功能<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button  <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-sm btn-danger deleteBtn"</span> th<span class="token operator">:</span>attr<span class="token operator">=</span><span class="token string">"uri=@&amp;#123;/emp/&amp;#125;+$&amp;#123;emp.id&amp;#125;"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></code></pre><p>但是我的项目是restful风格的，所以删除请求路径还是emp，但是改变他的请求方式为delete<br>**<em>如何改变请求方式？**</em><br>1.建立一个表单，post请求方式<br>2.建立隐藏域，_methed，value就是改变的请求方式</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"delForm"</span> action<span class="token operator">=</span><span class="token string">"#"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"_method"</span> value<span class="token operator">=</span><span class="token string">"delete"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span></code></pre><p>3.绑定单击事件，提交表单：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>script<span class="token operator">></span>            <span class="token comment" spellcheck="true">/*删除功能*/</span>            $<span class="token punctuation">(</span><span class="token string">".deleteBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//删除当前员工</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"你确定要删除吗？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    $<span class="token punctuation">(</span><span class="token string">"#delForm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">,</span>$<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>批量删除：</strong> 批量删除一个道理，给选中删除按钮绑定单击事件，给复选框的value值设置为员工id</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"td_checkbox"</span> name<span class="token operator">=</span><span class="token string">"eid"</span> th<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"$&amp;#123;emp.id&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>script<span class="token operator">></span>            <span class="token comment" spellcheck="true">/*全选功能*/</span>            $<span class="token punctuation">(</span><span class="token string">"#th_checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                $<span class="token punctuation">(</span><span class="token string">".td_checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*删除选中：给删除选中按钮绑定单击事件，点击提交表单，携带删除的员工id*/</span>            $<span class="token punctuation">(</span><span class="token string">"#delAll"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"你确定要删除所有选中吗？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        $<span class="token punctuation">(</span><span class="token string">"#delSelected"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">,</span>$<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>controller：</strong> 控制层可以使用request获取id集合</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//删除选中</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/emps"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  String <span class="token function">delSelected</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取被选中的所有员工id</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> eids <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"eid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>eids<span class="token punctuation">)</span><span class="token punctuation">;</span>        empService<span class="token punctuation">.</span><span class="token function">delSelected</span><span class="token punctuation">(</span>eids<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  <span class="token string">"redirect:/emps"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>service：</strong> 然后遍历集合，调用mapper删除</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//批量删除员工</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delSelected</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ids <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ids<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1.遍历数组</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String id <span class="token operator">:</span> ids<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.调用mapper删除</span>                mapper<span class="token punctuation">.</span><span class="token function">deleteEmp</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="2-3-添加和修改功能"><a href="#2-3-添加和修改功能" class="headerlink" title="2.3 添加和修改功能"></a>2.3 添加和修改功能</h5><blockquote><p>添加功能和修改功能相对简单，把前端提交的参数封装到Emp对象中，然后调用mapper插入数据就可以了，主要技术难点在于修改功能中的回显，就是编辑某个员工的信息时，可以向后端发送请求查询该员工信息，然后回显在前端页面，接着修改信息并提交插入</p></blockquote><p><strong>核心代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>form th<span class="token operator">:</span>action<span class="token operator">=</span><span class="token string">"@&amp;#123;/emp&amp;#125;"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>如何修改请求方式？                            <span class="token number">1</span><span class="token punctuation">.</span>页面创建一个post表单                            <span class="token number">2</span><span class="token punctuation">.</span>创建一个input项，name<span class="token operator">=</span><span class="token string">"_method"</span><span class="token punctuation">;</span>值就是我们指定的请求方式                        <span class="token operator">--</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"_method"</span> value<span class="token operator">=</span><span class="token string">"put"</span> th<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"$&amp;#123;emp!=null&amp;#125;"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"id"</span> th<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"$&amp;#123;emp.id&amp;#125;"</span> th<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"$&amp;#123;emp!=null&amp;#125;"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-group"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>label<span class="token operator">></span>name<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>                            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-control"</span> name<span class="token operator">=</span><span class="token string">"name"</span> placeholder<span class="token operator">=</span><span class="token string">"zhangsan"</span> th<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"$&amp;#123;emp!=null&amp;#125;?$&amp;#123;emp.name&amp;#125;"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-group"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>label<span class="token operator">></span>email<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>                            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"email"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-control"</span> name<span class="token operator">=</span><span class="token string">"email"</span> placeholder<span class="token operator">=</span><span class="token string">"zhangsan@atguigu.com"</span> th<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"$&amp;#123;emp!=null&amp;#125;?$&amp;#123;emp.email&amp;#125;"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-group"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>label<span class="token operator">></span>gender<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-check form-check-inline"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>input <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-check-input"</span> type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"gender"</span>  value<span class="token operator">=</span><span class="token string">"男"</span> th<span class="token operator">:</span>checked<span class="token operator">=</span><span class="token string">"$&amp;#123;emp!=null&amp;#125;?$&amp;#123;emp.gender=='男'&amp;#125;"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>label <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-check-label"</span><span class="token operator">></span>男<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-check form-check-inline"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>input <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-check-input"</span> type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"gender"</span>  value<span class="token operator">=</span><span class="token string">"女"</span> th<span class="token operator">:</span>checked<span class="token operator">=</span><span class="token string">"$&amp;#123;emp!=null&amp;#125;?$&amp;#123;emp.gender=='女'&amp;#125;"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>label <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-check-label"</span><span class="token operator">></span>女<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-group"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>label<span class="token operator">></span>department<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>                            <span class="token operator">&lt;</span>select <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-control"</span> name<span class="token operator">=</span><span class="token string">"deptId"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>option  th<span class="token operator">:</span>selected<span class="token operator">=</span><span class="token string">"$&amp;#123;emp!=null&amp;#125;?$&amp;#123;dept.id==emp.deptId&amp;#125;"</span> th<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"$&amp;#123;dept.id&amp;#125;"</span> th<span class="token operator">:</span>each<span class="token operator">=</span><span class="token string">"dept:$&amp;#123;depts&amp;#125;"</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>dept<span class="token punctuation">.</span>deptName<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-group"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>label<span class="token operator">></span>birth<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>                            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"date"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"form-control"</span> name<span class="token operator">=</span><span class="token string">"birth"</span> placeholder<span class="token operator">=</span><span class="token string">"zhangsan"</span> th<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"$&amp;#123;emp!=null&amp;#125;?$&amp;#123;#dates.format(emp.birth, 'yyyy-MM-dd')&amp;#125;"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-primary"</span> th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"$&amp;#123;emp!=null&amp;#125;?'修改':'添加'"</span><span class="token operator">></span>添加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span></code></pre><h5 id="2-4-分页查询功能-复杂查询"><a href="#2-4-分页查询功能-复杂查询" class="headerlink" title="2.4 分页查询功能+复杂查询"></a>2.4 分页查询功能+复杂查询</h5><p><strong>思路：</strong><br>    ==1.前端需要给后端传入哪儿些信息？==</p><blockquote><p>1、当前页码（currentPage）<br>2、每页显示多少条数据（pageSize）<br>3、这两个参数是必须的，后端会根据当前页码和每页显示多少来响应数据给前端</p></blockquote><p>==2.后端需要给前端响应哪儿些信息？==</p><blockquote><p>1、总记录数（totalCount）：数据库查了多少条数据<br>2、总页码数（totalPage）：总共有多少页，分页导航条需要用，一开始用的是假的分页导航条，只有查了数据库才知道有多少条记录，分了多少页，然后响应给前端，分页导航条遍历一下就可以了<br>3、查询的员工数据集合（List）</p></blockquote><p>3.为了方便交互，可以把这些参数封装到一个JavaBean对象中，前后端交互直接通过这个PageBean对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 分页对象，实现分页查询 * 前端传入：currentPage 当前页码 *          pageSize 每页显示多少条记录 * 后端响应：totalCount 总记录数 *          totalPage  总页码 *          List&lt;T> list 每页的数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageBean</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer totalPage<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总页码</span>    <span class="token keyword">private</span> Integer totalCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总记录数</span>    <span class="token keyword">private</span> Integer pageSize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每页显示多少条记录</span>    <span class="token keyword">private</span> Integer currentPage<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前页码</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每页的数据</span></code></pre><p><strong>核心代码：</strong><br><strong>controller：</strong></p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//分页查询+复杂查询</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/emps"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">findAllEmp</span><span class="token punctuation">(</span>PageBean<span class="token operator">&lt;</span>Emp<span class="token operator">></span> pageBean<span class="token punctuation">,</span>Emp emp<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>pageBean<span class="token punctuation">.</span><span class="token function">getCurrentPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token operator">||</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pageBean<span class="token punctuation">.</span><span class="token function">getCurrentPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           pageBean<span class="token punctuation">.</span><span class="token function">setCurrentPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>pageBean<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token operator">||</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pageBean<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           pageBean<span class="token punctuation">.</span><span class="token function">setPageSize</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        PageBean<span class="token operator">&lt;</span>Emp<span class="token operator">></span> pb <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageBean<span class="token punctuation">,</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Department<span class="token operator">></span> depts <span class="token operator">=</span> deptService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"depts"</span><span class="token punctuation">,</span>depts<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"pb"</span><span class="token punctuation">,</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"emp"</span><span class="token punctuation">,</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"emp/list"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><ul><li>首先要判断前端前端传入的currentPage和pageSize是否为空，因为在删除和添加功能操作后，会直接转到查询页面，这样是无法带参数的，所以可以加个判断，如果为空，可以将其赋值</li><li>然后调用service层查询，再把数据存入request域中响应给前端页面</li></ul></blockquote><p><strong>service：</strong>            </p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//分页查询所有员工 + 复杂查询</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PageBean<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>PageBean<span class="token operator">&lt;</span>Emp<span class="token operator">></span> pageBean<span class="token punctuation">,</span>Emp emp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> currentPage <span class="token operator">=</span> pageBean<span class="token punctuation">.</span><span class="token function">getCurrentPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取前端传来的currentPage</span>        <span class="token comment" spellcheck="true">//控制上一页操作超出</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentPage<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            currentPage<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pageSize <span class="token operator">=</span> pageBean<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取前端传来的pageSize</span>        <span class="token comment" spellcheck="true">//创建一个新的pageBean对象</span>        PageBean<span class="token operator">&lt;</span>Emp<span class="token operator">></span> pb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageBean</span><span class="token operator">&lt;</span>Emp<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置参数</span>        pb<span class="token punctuation">.</span><span class="token function">setCurrentPage</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">)</span><span class="token punctuation">;</span>        pb<span class="token punctuation">.</span><span class="token function">setPageSize</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询总记录数，并设置到新的pb对象中</span>        Integer totalCount <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findTotalCount</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>emp<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>emp<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pb<span class="token punctuation">.</span><span class="token function">setTotalCount</span><span class="token punctuation">(</span>totalCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询emp集合数据，先计算开始的索引</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token punctuation">(</span>currentPage<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pageSize<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> emps <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>pageSize<span class="token punctuation">,</span>emp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>emp<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>emp<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pb<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算总页码</span>        <span class="token keyword">int</span> totalPage <span class="token operator">=</span>  <span class="token punctuation">(</span>totalCount <span class="token operator">%</span> pageSize<span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> totalCount<span class="token operator">/</span>pageSize <span class="token operator">:</span> <span class="token punctuation">(</span>totalCount<span class="token operator">/</span>pageSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        pb<span class="token punctuation">.</span><span class="token function">setTotalPage</span><span class="token punctuation">(</span>totalPage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//控制下一页操作超出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPage<span class="token operator">>=</span>totalPage<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            currentPage<span class="token operator">=</span>totalPage<span class="token punctuation">;</span>            pb<span class="token punctuation">.</span><span class="token function">setCurrentPage</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pb<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>前端页面：</strong><br>分页导航条</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>nav aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token string">"Page navigation example"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pagination"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"page-item"</span><span class="token operator">></span>                                        <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"page-link"</span> href<span class="token operator">=</span><span class="token string">"#"</span> th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@&amp;#123;/emps(currentPage=$&amp;#123;pb.currentPage&amp;#125;-1,pageSize=7,name=$&amp;#123;emp.name&amp;#125;,gender=$&amp;#123;emp.gender&amp;#125;,deptId=$&amp;#123;emp.deptId&amp;#125;)&amp;#125;"</span> aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token string">"Previous"</span><span class="token operator">></span>                                            <span class="token operator">&lt;</span>span aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&amp;</span>laquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                                        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                                    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                                    <span class="token operator">&lt;</span>th<span class="token operator">:</span>block th<span class="token operator">:</span>each<span class="token operator">=</span><span class="token string">"page:$&amp;#123;#numbers.sequence(1,pb.totalPage)&amp;#125;"</span> <span class="token operator">></span>                                    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"page-item "</span> th<span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"$&amp;#123;(pb.currentPage==page)?'page-item active':'page-item'&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"page-link"</span> href<span class="token operator">=</span><span class="token string">"#"</span> th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@&amp;#123;/emps(currentPage=$&amp;#123;page&amp;#125;,pageSize=7,name=$&amp;#123;emp.name&amp;#125;,gender=$&amp;#123;emp.gender&amp;#125;,deptId=$&amp;#123;emp.deptId&amp;#125;)&amp;#125;"</span> th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"$&amp;#123;page&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                                    <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">:</span>block<span class="token operator">></span>                                    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"page-item"</span><span class="token operator">></span>                                        <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"page-link"</span> href<span class="token operator">=</span><span class="token string">"#"</span> th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@&amp;#123;/emps(currentPage=$&amp;#123;pb.currentPage&amp;#125;+1,pageSize=7,name=$&amp;#123;emp.name&amp;#125;,gender=$&amp;#123;emp.gender&amp;#125;,deptId=$&amp;#123;emp.deptId&amp;#125;)&amp;#125;"</span> aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token string">"Next"</span><span class="token operator">></span>                                            <span class="token operator">&lt;</span>span aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&amp;</span>raquo<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                                        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                                    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                                    <span class="token operator">&lt;</span>li<span class="token operator">></span>                                        <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"span_page"</span><span class="token operator">></span>共<span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: red"</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>pb<span class="token punctuation">.</span>totalPage<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>页，<span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"color: red"</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>pb<span class="token punctuation">.</span>totalCount<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>条记录<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                                    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>nav<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>员工数据</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>tbody<span class="token operator">></span>                                 <span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"delSelected"</span> action<span class="token operator">=</span><span class="token string">"#"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"_method"</span> value<span class="token operator">=</span><span class="token string">"delete"</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>tr th<span class="token operator">:</span>each<span class="token operator">=</span><span class="token string">"emp:$&amp;#123;pb.list&amp;#125;"</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"td_checkbox"</span> name<span class="token operator">=</span><span class="token string">"eid"</span> th<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"$&amp;#123;emp.id&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>使用emp来遍历emps，所以其默认状态变量为：empStat<span class="token punctuation">,</span>empStat<span class="token punctuation">.</span>count实现循环时递增序号<span class="token operator">--</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>td th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"$&amp;#123;empStat.count&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span>td th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"$&amp;#123;emp.id&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span>td th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"$&amp;#123;emp.name&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span>td th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"$&amp;#123;emp.email&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span>td th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"$&amp;#123;emp.gender&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span>td th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"$&amp;#123;emp.deptId&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span>td th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"$&amp;#123;#dates.format(emp.birth,'yyyy-MM-dd')&amp;#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                    <span class="token operator">&lt;</span>td<span class="token operator">></span>                                        <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-sm btn-primary"</span> th<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"@&amp;#123;/emp/&amp;#125;+$&amp;#123;emp.id&amp;#125;"</span><span class="token operator">></span>编辑<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                                        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>删除功能<span class="token operator">--</span><span class="token operator">></span>                                        <span class="token operator">&lt;</span>button  <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-sm btn-danger deleteBtn"</span> th<span class="token operator">:</span>attr<span class="token operator">=</span><span class="token string">"uri=@&amp;#123;/emp/&amp;#125;+$&amp;#123;emp.id&amp;#125;"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                                    <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span></code></pre><p><strong>mapper：</strong></p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findAll"</span>  parameterType<span class="token operator">=</span><span class="token string">"map"</span> resultMap<span class="token operator">=</span><span class="token string">"empMap"</span><span class="token operator">></span>        select <span class="token operator">*</span> from emp        <span class="token operator">&lt;</span>where<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"name!=null and name !=''"</span><span class="token operator">></span>                and name like #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"gender!=null and gender !=''"</span><span class="token operator">></span>                and gender <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>gender<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"deptId!=null and deptId!='' and deptId!=0"</span><span class="token operator">></span>                and dept_id <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>deptId<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>        limit #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>start<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>pageSize<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><blockquote><ul><li>用where，if标签实现动态SQL语句，根据参数的不同就可以实现分页查询+复杂条件查询</li></ul></blockquote><p><strong>想要了解更多细节，可自取源码学习</strong><br>链接：<a href="https://pan.baidu.com/s/1GyABuboKeSsRF_tnmzLlSw">https://pan.baidu.com/s/1GyABuboKeSsRF_tnmzLlSw</a><br>提取码：8691<br><strong>有啥错误大家可以指出，相互学习哈~~</strong></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Alibaba Nacos</title>
      <link href="/xhnb.github.io/2020/09/27/SpringCloud-Alibaba-Nacos/"/>
      <url>/xhnb.github.io/2020/09/27/SpringCloud-Alibaba-Nacos/</url>
      
        <content type="html"><![CDATA[<p>@[TOC](SpringCloud Alibaba Nacos)</p><h1 id="一-Nacos简介"><a href="#一-Nacos简介" class="headerlink" title="一.Nacos简介"></a>一.Nacos简介</h1><blockquote><p>Nacos：Dynamic Naming and Configuration Service<br>一个更易于构建云原生应用的动态服务发现，配置管理和服务管理中心</p></blockquote><p>==<strong>Nacos = Eureka+Config+Bus</strong>==<br><strong>Nacos的出现替代了原先的Eureka做服务注册中心，也替代了Config做服务配置中心</strong></p><h1 id="二-Nacos的安装并运行"><a href="#二-Nacos的安装并运行" class="headerlink" title="二.Nacos的安装并运行"></a>二.Nacos的安装并运行</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>Nacos下载地址：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a><br>由于官网下载体验极差，下载非常慢，所以我为大家准备了，请自取<br>链接：<a href="https://pan.baidu.com/s/1-g0mCLPkc3LzygJiQz8b1Q">https://pan.baidu.com/s/1-g0mCLPkc3LzygJiQz8b1Q</a><br>提取码：c3f4</p><h2 id="2-运行"><a href="#2-运行" class="headerlink" title="2.运行"></a>2.运行</h2><p>解压，进入bin目录，启动startup.cmd<br><img src="https://img-blog.csdnimg.cn/2020062521133375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行成功后直接访问<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a><br>默认账号密码都是nacos<br>登录成功<br><img src="https://img-blog.csdnimg.cn/2020062521162164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="三-Nacos作为服务注册中心"><a href="#三-Nacos作为服务注册中心" class="headerlink" title="三.Nacos作为服务注册中心"></a>三.Nacos作为服务注册中心</h1><h2 id="1-基于Nacos的服务提供者"><a href="#1-基于Nacos的服务提供者" class="headerlink" title="1.基于Nacos的服务提供者"></a>1.基于Nacos的服务提供者</h2><p><strong>cloudalibaba-provider-payment9001：</strong></p><ul><li>pom.xml<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li>application.yml</li></ul><pre class=" language-yml"><code class="language-yml">server:  port: 9001spring:  application:    name: nacos-payment-provider  cloud:    nacos:      discovery:        server-addr: localhost:8848 #配置Nacos地址management:  endpoints:    web:      exposure:        include: '*'</code></pre><ul><li>主启动类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain9001</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>PaymentMain9001<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>controller</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;server.port&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/nacos/&amp;#123;id&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"nacos registry, serverPort: "</span><span class="token operator">+</span> serverPort<span class="token operator">+</span><span class="token string">"\t id"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>再创建一个服务提供者cloudalibaba-provider-payment9002和9001一样的配方，改个端口，方便测试nacos的负载均衡</strong></p><p><strong>服务提供者的自测：</strong><br><img src="https://img-blog.csdnimg.cn/20200626092908712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200626092941282.png" alt="在这里插入图片描述"><br>nacos中已经有了两个服务<br><img src="https://img-blog.csdnimg.cn/2020062609302727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-基于Nacos的服务消费者"><a href="#2-基于Nacos的服务消费者" class="headerlink" title="2.基于Nacos的服务消费者"></a>2.基于Nacos的服务消费者</h2><p><strong>cloudalibaba-consumer-nacos-order83：</strong></p><ul><li>pom.xml</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--SpringCloud ailibaba nacos --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baidu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>project.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ul><li>application,yml</li></ul><pre class=" language-yml"><code class="language-yml">server:  port: 83spring:  application:    name: nacos-order-consumer  cloud:    nacos:      discovery:        server-addr: localhost:8848service-url:  nacos-user-service: http://nacos-payment-provider</code></pre><ul><li>config/ApplicationContextConfig：<strong>Nocos内置ribbon，所以配和RestTemplate实现服务调用和负载均衡</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>controller</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderNacosController</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;service-url.nacos-user-service&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String serverURL<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/nacos/&amp;#123;id&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serverURL<span class="token operator">+</span><span class="token string">"/payment/nacos/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>主启动类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderNacosMain83</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderNacosMain83<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>测试<br>nocos 内置ribbon，可实现负载均衡<br><img src="https://img-blog.csdnimg.cn/20200626094132828.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200626101733304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="3-主流服务注册中心对比"><a href="#3-主流服务注册中心对比" class="headerlink" title="3.主流服务注册中心对比"></a>3.主流服务注册中心对比</h2><h3 id="3-1-经典CAP理论"><a href="#3-1-经典CAP理论" class="headerlink" title="3.1 经典CAP理论"></a>3.1 经典CAP理论</h3></li></ul><blockquote><p><strong>C：Consistency(一致性)</strong><br><strong>A：Availability(可用性)</strong><br><strong>P：Partition tolerance(分区容错性)</strong><br><img src="https://img-blog.csdnimg.cn/20200626105254847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>CAP最初是由Eric Brewer提出，他证明了，==在分布式数据系统中，CAP三要素不可能兼得，同时只能满足其中的两种==</p></blockquote><h4 id="Partition-tolerance-分区容错性"><a href="#Partition-tolerance-分区容错性" class="headerlink" title="Partition tolerance(分区容错性)"></a>Partition tolerance(分区容错性)</h4><p><strong>分布式系统中任何机器都是可能断网或者宕机的，在这种情况下系统如果还能正常工作，就是有比较好的分区容错性</strong><br>一般来说，分区容错无法避免，因此可以认为 CAP 的 P 总是成立CAP 定理告诉我们，剩下的 C 和 A 无法同时做到</p><h4 id="Consistency-一致性"><a href="#Consistency-一致性" class="headerlink" title="Consistency(一致性)"></a>Consistency(一致性)</h4><p><strong>所有节点在同一时间的数据完全一致，一致性说的就是分布式数据一致性</strong><br><strong>对于一致性，可以分为从客户端和服务端两个不同的视角。<br>从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题<br>从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致</strong><br>如图就是保证了一致性：<br><img src="https://img-blog.csdnimg.cn/20200626104456138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Availability-可用性"><a href="#Availability-可用性" class="headerlink" title="Availability(可用性)"></a>Availability(可用性)</h4><p><strong>用户在分布式系统中的每个操作应当收到一个非错误的回应，简单来说要保证系统是一直能正常使用的<br>就以支付为例，在一些异常情况下，是会有“支付失败”的问题的，这就是没有保证可用性，但是对于支付这种场景，牺牲可用性保证一致性是必须的</strong></p><p><strong>小总结：</strong><br>由此可见，CAP三者根据具体的分布式业务场景做取舍和折中：比如银行系统可以牺牲可用性从而保障CP，响应慢一点（甚至网络故障暂停服务）总比账户资金出现错误更优；而很多提供互联网服务可以一定程度牺牲一致性来保障AP，因为互联网竞争激烈，追求的是用户体验和效率，希望用户随时随地能够高效获得服务，而一致性则通过一系列的措施做到最终一致性即可</p><h3 id="3-2-Nocos同其他服务注册中心对比"><a href="#3-2-Nocos同其他服务注册中心对比" class="headerlink" title="3.2 Nocos同其他服务注册中心对比"></a>3.2 Nocos同其他服务注册中心对比</h3><table><thead><tr><th></th><th>Eureka</th><th>Zookeeper</th><th>Consul</th><th>Nacos</th></tr></thead><tbody><tr><td><strong>CAP</strong></td><td><strong>AP</strong></td><td><strong>CP</strong></td><td><strong>CP</strong></td><td><strong>AP+CP</strong></td></tr></tbody></table><p>一般<strong>C</strong>是所有节点在同一时刻看到的数据是一致的；而<strong>A</strong>的定义是所有的请求都会收到响应</p><p><strong>CP：</strong> 满足一致性，分区容错性的系统，通常性能不是特别高<br><strong>AP：</strong> 满足可用性，分区容错性的系统，通常可能对一致性要求低一点 </p><h4 id="Nacos支持AP和CP模式的切换"><a href="#Nacos支持AP和CP模式的切换" class="headerlink" title="Nacos支持AP和CP模式的切换"></a>Nacos支持AP和CP模式的切换</h4><ul><li><strong><em>何时选择使用何种模式？</em></strong></li></ul><blockquote><p>一般来说，如果不需要存储服务级别的信息且服务实例是通过nacos-client注册，并能够保持心跳上报，那么就可以选择AP模式。当前主流的服务如SpringCloud和Dubbo服务，都适用与AP模式，AP模式为了服务的可能性而减弱了一致性，因此AP模式下只支持注册临时实例<br>如果需要在服务级别编辑或存储配置信息，那么CP是必须，K8S服务和DNS服务则适用于CP模式。CP模式下则支持注册持久化实例，此时则是以Raft协议为集群运行模式，该模式下注册实例之前必须先注册服务，如果服务不出存在，则会返回错误</p></blockquote><p>用下面命令切换</p><pre class=" language-shell"><code class="language-shell">curl -X PUT '$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&value=CP'</code></pre><h1 id="四-Nacos作为服务配置中心"><a href="#四-Nacos作为服务配置中心" class="headerlink" title="四.Nacos作为服务配置中心"></a>四.Nacos作为服务配置中心</h1><p><strong>cloudalibaba-config-nacos-client3377：</strong></p><ul><li>pom.xml</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--nacos-config--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--nacos-discovery--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--web + actuator--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--一般基础配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ul><li>bootstrap.yml</li></ul><pre class=" language-yml"><code class="language-yml">server:  port: 3377spring:  application:    name: nacos-config-client  cloud:    nacos:      discovery:        server-addr: localhost:8848 #服务注册中心地址      config:        server-addr: localhost:8848 #配置中心地址        file-extension: yaml #指定yaml格式的配置</code></pre><ul><li>application.yml</li></ul><pre class=" language-yml"><code class="language-yml">spring:  profiles:    active: dev #指定环境</code></pre><blockquote><p>这里为什么有bootstrap.yml和application.yml两个配置文件<br>Nacos和SpringCloud-Config一样，在项目初始化的时候，要保证先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动<br>bootstrap.yml加载优先级高于application.yml</p></blockquote><ul><li>主启动类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosConfigClientMain3377</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NacosConfigClientMain3377<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>controller：测试一下是否能获取，即是否加载了</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span>  <span class="token comment" spellcheck="true">// 开启自动刷新</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;config.info&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/config/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>Nacos添加配置信息：</strong><br><img src="https://img-blog.csdnimg.cn/20200628121118984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628121723810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628122246391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试：成功访问<br><img src="https://img-blog.csdnimg.cn/20200628122522842.png" alt="在这里插入图片描述"><br>修改Nacos的配置信息，也可以动态的自动刷新</p><h2 id="Namespace-Group-Data-ID三者关系？"><a href="#Namespace-Group-Data-ID三者关系？" class="headerlink" title="Namespace+Group+Data ID三者关系？"></a>Namespace+Group+Data ID三者关系？</h2><blockquote><p>类似java里面的包名、类名，最外层的Namespace是可以区分部署环境的，Group和DataID逻辑上区分两个目标对象<br><img src="https://img-blog.csdnimg.cn/20200628125932150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><ul><li>Nacos默认的命名空间是public，Namespace主要用来实现隔离。比方说我们现在有三个环境，开发、测试、生产环境，我们就可以创建三个Namespace，不同的Namespace之间是隔离的</li><li>Group默认是DEFAULT_GROUP，Group可以把不同的微服务划分到同一个分组里面去</li><li>Service就是微服务，一个Service里面可以包含多个Cluster（集群），Nacos默认Cluster是DEFAULT，Cluster是指对指定微服务的一个虚拟划分。比方说为了容灾，将Service微服务分别部署在杭州和广州机房，这是就可以给杭州机房的Service微服务起一个集群名称（HZ），给广州（GZ），还可以尽量让同一个机房的微服务相互调用，以提升性能</li><li>Instance就是微服务的实例<h2 id="DataID"><a href="#DataID" class="headerlink" title="DataID"></a>DataID</h2>为什么我们上述DataID要这样写？<code>nacos-config-client-dev.yaml</code><br>因为在Nacos SpringCloud 中，DataID的完整格式是：</li></ul><pre><code>$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</code></pre><ul><li>prefix 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置</li><li>spring.profile.active 即为当前环境对应的 profile，详情可以参考 Spring Boot文档。 注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 <code>$&#123;prefix&#125;.$&#123;file-extension&#125; </code></li><li>file-extension为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 properties 和 yaml 类型</li></ul><p>最后公式：</p><pre><code>$&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code></pre><p><img src="https://img-blog.csdnimg.cn/20200628124823322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h2><p><img src="https://img-blog.csdnimg.cn/20200628131917866.png" alt="在这里插入图片描述"><br>通过修改配置文件，增加一个group，就能区分</p><pre class=" language-yml"><code class="language-yml">spring:  application:    name: nacos-config-client  cloud:    nacos:      discovery:        server-addr: localhost:8848 #服务注册中心地址      config:        server-addr: localhost:8848 #配置中心地址        file-extension: yaml #指定yaml格式的配置        group: DEV_GROUP  #指定组</code></pre><p><img src="https://img-blog.csdnimg.cn/20200628132325249.png" alt="在这里插入图片描述"></p><h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><p><img src="https://img-blog.csdnimg.cn/20200628132531352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628132544152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628132626141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过修改配置文件，添加namespace，进行区分</p><pre class=" language-yml"><code class="language-yml">spring:  application:    name: nacos-config-client  cloud:    nacos:      discovery:        server-addr: localhost:8848 #服务注册中心地址      config:        server-addr: localhost:8848 #配置中心地址        file-extension: yaml #指定yaml格式的配置        group: DEV_GROUP  #指定组        namespace: dev  #指定命名空间</code></pre><p><img src="https://img-blog.csdnimg.cn/20200628132810684.png" alt="在这里插入图片描述"></p><h1 id="五-Nacos集群和持久化配置"><a href="#五-Nacos集群和持久化配置" class="headerlink" title="五.Nacos集群和持久化配置"></a>五.Nacos集群和持久化配置</h1><h2 id="1-官网说明"><a href="#1-官网说明" class="headerlink" title="1.官网说明"></a>1.官网说明</h2><p><img src="https://img-blog.csdnimg.cn/20200628155439452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通俗解释：就是把请求通过Nginx转发到Nacos集群实现高可用，Nacos集群连接相同的Mysql集群，实现持久化。在单机模式时nacos默认使用嵌入式的数据库（derby）实现数据的存储，不方便观察数据存储的基本情况<br><img src="https://img-blog.csdnimg.cn/20200628160657358.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-在Linux上进行Nacos的集群和持久化配置"><a href="#2-在Linux上进行Nacos的集群和持久化配置" class="headerlink" title="2.在Linux上进行Nacos的集群和持久化配置"></a>2.在Linux上进行Nacos的集群和持久化配置</h2><h3 id="2-1-Linux安装Nacos"><a href="#2-1-Linux安装Nacos" class="headerlink" title="2.1 Linux安装Nacos"></a>2.1 Linux安装Nacos</h3><p>由于官网下载非常慢，给大家准备了~~<br>链接：<a href="https://pan.baidu.com/s/1eOxEBBG9Nt9EQZDbctEBjg">https://pan.baidu.com/s/1eOxEBBG9Nt9EQZDbctEBjg</a><br>提取码：583r<br>将压缩包传到linux上，进行解压</p><pre class=" language-shell"><code class="language-shell">tar -zxvf nacos-server-1.2.1.tar.gz </code></pre><h3 id="2-2-Linux安装Mysql"><a href="#2-2-Linux安装Mysql" class="headerlink" title="2.2 Linux安装Mysql"></a>2.2 Linux安装Mysql</h3><ul><li>docker 下载mysql镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker pull mysql:5.7</code></pre><ul><li>运行镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker run -p 3306:3306 --name mysql_nacos -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</code></pre><ul><li>进入容器测试</li></ul><pre class=" language-shell"><code class="language-shell">//进入容器docker exec -it mysql_nacos bash//登录mysqlmysql -uroot -p123456//查看数据库，测试show databases;</code></pre><p>docker下载mysql成功<br><img src="https://img-blog.csdnimg.cn/20200628164330115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Windows上Navicat连接linux数据库<br><img src="https://img-blog.csdnimg.cn/20200629075915880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="2-3-derby到mysql切换配置步骤"><a href="#2-3-derby到mysql切换配置步骤" class="headerlink" title="2.3 derby到mysql切换配置步骤"></a>2.3 derby到mysql切换配置步骤</h3><ol><li><p>在nacos/conf/目录下找到sql脚本（nacos-mysql.sql），将nacos-mysql.sql传入Windows<br><img src="https://img-blog.csdnimg.cn/20200628170100524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>在Navicat上创建nacos_config数据库，并执行脚本，<br><img src="https://img-blog.csdnimg.cn/20200629080303917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628170356873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>更改application.properties配置<br>还是在nocos/conf目录下<br><img src="https://img-blog.csdnimg.cn/20200628170742443.png" alt="在这里插入图片描述"><br>在最后添加如下图信息，表示连接的mysql<br><img src="https://img-blog.csdnimg.cn/20200628171404219.png" alt="在这里插入图片描述"></p><h3 id="2-4-Linux服务器上nacos的集群配置"><a href="#2-4-Linux服务器上nacos的集群配置" class="headerlink" title="2.4 Linux服务器上nacos的集群配置"></a>2.4 Linux服务器上nacos的集群配置</h3></li><li><p>编辑nacos/conf/cluster.conf<br>梳理出3台nacos机器的不同服务端口号<br><img src="https://img-blog.csdnimg.cn/202006281739512.png" alt="在这里插入图片描述"></p></li><li><p>编辑Nacos的启动脚本startup.sh，使它能够接受不同的启动端<br>/mynacos/nacos/bin目录下有startup.sh<br>集群启动，我们希望传递不同的端口号启动不同的nacos实例<br>如：<code>./startup.sh -p 3333</code>表示启动端口号为3333的nacos服务器实例，这端口号和上一步的cluster.conf配置的一致</p></li></ol><pre class=" language-shell"><code class="language-shell">vim startup.sh</code></pre><p>修改下面两处<br><img src="https://img-blog.csdnimg.cn/20200628181004559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200628181039507.png" alt="在这里插入图片描述"><br>启动实例<br><img src="https://img-blog.csdnimg.cn/20200628181543657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-5-Nginx的配置，由它作为负载均衡器"><a href="#2-5-Nginx的配置，由它作为负载均衡器" class="headerlink" title="2.5 Nginx的配置，由它作为负载均衡器"></a>2.5 Nginx的配置，由它作为负载均衡器</h3><p>修改nginx的配置文件，在 /usr/local/nginx/conf目录下，修改nginx.conf</p><p><img src="https://img-blog.csdnimg.cn/20200628182524943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统学习</title>
      <link href="/xhnb.github.io/2020/09/27/Linux%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
      <url>/xhnb.github.io/2020/09/27/Linux%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux系统学习记录"><a href="#Linux系统学习记录" class="headerlink" title="Linux系统学习记录"></a>Linux系统学习记录</h1><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><p><strong>ls</strong>：查看当前目录下的所有文件</p><p><strong>ls -a</strong>：查看当前目录下所有文件包括隐藏文件（以.开头的文件）</p><p><strong>ls -l、ll</strong>：这两个命令是查看当前目录的所有文件并带上详细信息</p><p><strong>cd</strong>：切换目录</p><p><strong>cd ..</strong>:返回上一级目录</p><p><strong>pwd</strong>：查看路径</p><p><strong>mkdir</strong>：创建目录</p><p><strong>touch</strong>：创建一个空文件 </p><p><strong>clear、ctrl+l</strong>：清屏</p><p><strong>mkdir -p</strong>：创建多级目录：<strong>mkdir -p a/b</strong></p><p><strong>rmdir</strong>：删除目录，只能删除空目录</p><p><strong>cat</strong>：查看文件内容：一次性列举完</p><p><strong>more</strong>：查看文件内容：用于列举文件超过一个画面的，按回车显示下一行，按空格显示下一个画面，按q（ctrl+c）退出查看</p><p><strong>less</strong>：和more功能类似，不同的是加了可以使用pg up 和 pg dn 翻页</p><p><strong>tail</strong>：用于显示文件后几行的内容</p><p>用法：<strong>tail -10 install.log</strong>：查看后10行数据</p><pre><code>        **tail -f catalina.log**：动态查看日志        **ctrl+c** 退出查看</code></pre><p><strong>cp</strong>：复制文件</p><p><strong>mv</strong>：移动文件，相当于剪切</p><p><strong>rm</strong>：删除文件</p><p><strong>rm -r</strong>：删除目录</p><p><strong>rm -rf</strong>：删除目录并不询问是否删除 （危险操作）</p><p><strong>tar</strong>：(打包或解压)</p><pre><code>它能够将用户所指定的文件或目录==打包成一个文件，但不做压缩== 。一般Linux系统上常用的压缩方式是选用            tar打包成一个文件，再用gzip压缩命令压缩成xxx.tar.gz（或称xxx.tgz）的文件。常用参数：**-c：创建一个新的tar文件****-v：显示运行过程的信息****-f：指定文件名****-z：调用gzip压缩命令压缩****-t：查看压缩文件的内容****-x：解开tar文件**</code></pre><p><strong>打包：</strong></p><pre><code>**tar  -cvf   a.tar  apache-tomcat-7.0.57/**</code></pre><p>（ a.tar：指定的打包后文件名，apache-tomcat-7.0.57/：指定打包的文件目录）</p><p><strong>打包并压缩：</strong></p><pre><code>**tar  -zcvf   b.tar.gz  apache-tomcat-7.0.57/**</code></pre><p>（ b.tar.gz：指定的打包并压缩后文件名，apache-tomcat-7.0.57/：指定打包并压缩的文件目录）                </p><p><strong>解压：</strong></p><pre><code>**tar  -zxvf  b.tar.gz**                      （b.tar.gz是解压的文件，路径不写默认解压到当前目录）**tar  -zxvf  b.tar.gz  -C  ./bb**         （加路径需要加-C，./bb表示当前目录下的bb目录）</code></pre><p><strong>find</strong>：查找文件（输出文件路径）</p><pre><code>find / -name anaconda-ks.cfg     、  find / -name anacon*    </code></pre><p> （/：表示在根目录下，-name：按文件名查找，后面就是要查找的文件名）</p><p><strong>grep</strong>：查找文件里符合的字符串</p><pre><code>**grep  lang  anaconda-ks.cfg**                        （在文件里查找lang）**grep lang anaconda-ks.cfg --color**              （查找关键字并高亮显示）**grep lang anaconda-ks.cfg --color -A3**       （并显示关键字所在处的后三行）**grep lang anaconda-ks.cfg --color -B3**       （并显示关键字所在处的前三行）    </code></pre><h3 id="2-vi-vim编辑器"><a href="#2-vi-vim编辑器" class="headerlink" title="2.vi vim编辑器"></a>2.vi vim编辑器</h3><p>在linux系统下一般使用vim来编辑文件，既可以查看文件，也可以编辑文件。有三种模式：</p><p>命令行模式、插入模式、底行模式</p><p><strong>vim a.txt：</strong>==进去首先是<strong>命令行模式</strong>，不能编辑，需要按i、a、o键，即可进如<strong>插入模式</strong>==</p><pre><code>i：在当前位置前插入I：在当前行首插入a：在当前位置后插入A：在当前行尾插入o：在当前行之后插入一行O：在当前行之前插入一行</code></pre><p>==编辑完成后按esc键退出插入模式回到<strong>命令行模式</strong>==，再按==：==即可==进入<strong>底行模式</strong>==</p><p>进入底行模式后：按==wq+enter键==：保存并退出</p><pre><code>                            按==q!+enter键==：不保存并退出（如果你未对文件编辑，可按q退出）                            按 ==/+关键字==：可搜索关键字</code></pre><p> <strong>重定向输出&gt;、&gt;&gt;：</strong></p><pre><code>**cat a.txt &gt; b.txt：**将查看a.txt的输出信息输出在b.txt中，==覆盖了b.txt中原有内容==**cat a.txt &gt;&gt; b.txt：**将查看a.txt的输出信息输出在b.txt中，==追加了b.txt中原有内容==</code></pre><p><strong>ps -ef：</strong>查看所有进程</p><p><strong>ps -ef  | grep java：</strong>查找某一进程</p><p><strong>kill -9 java：</strong>强制杀死进程</p><h3 id="3-管道"><a href="#3-管道" class="headerlink" title="3.管道"></a>3.管道</h3><pre><code> 管道是Linux命令中一个重要的概念，其作用就是将==一个命令的输出用作另一个命令的输入。==</code></pre><p>例如：<strong>ls –help |more：</strong>分页查询帮助信息</p><pre><code>        **ps -ef  | grep java：**查找名称中包含java的进程</code></pre><h3 id="4-Linux权限"><a href="#4-Linux权限" class="headerlink" title="4.Linux权限"></a>4.Linux权限</h3><p><img src="https://img-blog.csdnimg.cn/20200519213959918.png" alt="在这里插入图片描述"><br>对应的四段：<strong>—              ———              ———        ———</strong></p><p>第一个：代表文件的类型（常见）</p><pre><code>    *- 代表文件    *d 代表文件夹（目录）    *l 表示链接</code></pre><p>第二个：==当前用户==具有该文件的权限</p><pre><code>    *r：read    可读    4    *w：write    可写    2    *x：excute    可执行    1</code></pre><p>第三个：==当前组内其他用户==具有该文件的权限</p><pre><code>    *r：read    可读    4    *w：write    可写    2    *x：excute    可执行    1</code></pre><p>第四个：==其他组的用户==具有该文件的权限</p><pre><code>    *r：read    可读    4    *w：write    可写    2    *x：excute    可执行    1</code></pre><p><strong>如何修改权限：</strong></p><pre><code>    **chmod u=rwx,g=rwx,o=rwx a.txt ：**即可改变a.txt的权限    **chmod 777 a.txt：**和上述命令效果一样，更加方便</code></pre><h3 id="5-安装jdk1-8"><a href="#5-安装jdk1-8" class="headerlink" title="5.安装jdk1.8"></a>5.安装jdk1.8</h3><p>1.首先去/usr/local目录创建一个jdk的文件夹，用来存放jdk1.8的压缩包</p><pre class=" language-java"><code class="language-java">cd <span class="token operator">/</span>usr<span class="token operator">/</span>localmkdir jdkcd jdk</code></pre><p>2.下载jdk1.8并使用xftp工具传输文件</p><p>jdk1.8去官网下载找到对应版本，不过小白有点麻烦，这里直接白嫖吧，记得点赞，嘻嘻</p><p>链接：<a href="https://pan.baidu.com/s/1D3WxZCWBtQS85myHhyPs4g">https://pan.baidu.com/s/1D3WxZCWBtQS85myHhyPs4g</a><br>提取码：hwg3<br>使用xftp工具传输文件<br><img src="https://img-blog.csdnimg.cn/20200519214028284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.查看linux系统默认jdk（会默认安装openjdk）</p><pre class=" language-java"><code class="language-java">rpm <span class="token operator">-</span>qa <span class="token operator">|</span> grep java</code></pre><p>4.删除默认openjdk</p><pre class=" language-java"><code class="language-java">rpm <span class="token operator">-</span>e <span class="token operator">--</span>nodeps <span class="token operator">+</span>（你的openjdk版本，直接复制）</code></pre><p>5.解压下载的jdk-8u251-linux-x64.tar.gz</p><pre class=" language-java"><code class="language-java"> tar <span class="token operator">-</span>zxvf jdk<span class="token operator">-</span>8u251<span class="token operator">-</span>linux<span class="token operator">-</span>x64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz</code></pre><p>6.设置java环境变量</p><p>6.1编辑/etc/profile</p><pre class=" language-java"><code class="language-java">vim <span class="token operator">/</span>etc<span class="token operator">/</span>profile</code></pre><p>6.2加上设置</p><pre class=" language-java"><code class="language-java">#set java enviromentJAVA_HOME<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_251CLASSPATH<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">:</span>$JAVA_HOME<span class="token operator">/</span>lib<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>jarPATH<span class="token operator">=</span>$JAVA_HOME<span class="token operator">/</span>bin<span class="token operator">:</span>$PATHexport JAVA_HOME CLASSPATH PATH</code></pre><p>6.3退出编辑并更新</p><pre class=" language-java"><code class="language-java">source <span class="token operator">/</span>etc<span class="token operator">/</span>profile</code></pre><p>7.查看</p><pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>version</code></pre><p><img src="https://img-blog.csdnimg.cn/20200519214105495.png"><br>8.安装完成</p><h3 id="6-安装docker"><a href="#6-安装docker" class="headerlink" title="6.安装docker"></a>6.安装docker</h3><p>1.查看内核版本：3.1及以上可以下一步安装，不然要升级内核版本，升级内核对小白有点麻烦，可以重新装个CentOS7的版本，一般只有CentOS6的内核版本过低</p><pre class=" language-java"><code class="language-java">uname <span class="token operator">-</span>r</code></pre><p>2.安装docker</p><pre class=" language-java"><code class="language-java">yum indtall docker</code></pre><p>3.启动docker，查看版本</p><pre class=" language-java"><code class="language-java">systemctl start dockerdocker <span class="token operator">-</span>v</code></pre><p>4.设置开机自启docker</p><pre class=" language-java"><code class="language-java">systemctl enable docker</code></pre><p>5.关闭docker</p><pre class=" language-java"><code class="language-java">systemctl stop docker</code></pre><h4 id="6-1docker镜像操作常用命令"><a href="#6-1docker镜像操作常用命令" class="headerlink" title="6.1docker镜像操作常用命令"></a>6.1docker镜像操作常用命令</h4><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>检索镜像：镜像名是你想搜索的，如mysql</p><pre class=" language-java"><code class="language-java">docker search 镜像名</code></pre><p>拉取（下载）镜像：（tag为镜像版本）</p><pre class=" language-java"><code class="language-java">docker pull mysql：tag</code></pre><p>查看镜像列表：</p><pre class=" language-java"><code class="language-java">docker images</code></pre><p>删除镜像：images-id为镜像列表中的images-id</p><pre class=" language-java"><code class="language-java">docker rmi images<span class="token operator">-</span>id</code></pre><h4 id="6-2docker容器操作常用命令"><a href="#6-2docker容器操作常用命令" class="headerlink" title="6.2docker容器操作常用命令"></a>6.2docker容器操作常用命令</h4><p>软件镜像（tomcat）—-运行镜像—-产生一个容器（正在运行的软件，运行的tomcat）</p><p>步骤：</p><pre class=" language-shell"><code class="language-shell">1、搜索镜像[root@localhost ~]# docker search tomcat2、拉取镜像[root@localhost ~]# docker pull tomcat3、根据镜像启动容器docker run --name mytomcat -d tomcat:latest4、docker ps  查看运行中的容器5、 停止运行中的容器docker stop  容器的id6、查看所有的容器docker ps -a7、启动容器docker start 容器id8、删除一个容器 docker rm 容器id9、启动一个做了端口映射的tomcat[root@localhost ~]# docker run -d -p 8888:8080 tomcat-d：后台运行-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口10、为了演示简单关闭了linux的防火墙service firewalld status ；查看防火墙状态service firewalld stop：关闭防火墙11、查看容器的日志docker logs container-name/container-id更多命令参看https://docs.docker.com/engine/reference/commandline/docker/可以参考每一个镜像的文档</code></pre><h4 id="6-3使用docker安装mysql"><a href="#6-3使用docker安装mysql" class="headerlink" title="6.3使用docker安装mysql"></a>6.3使用docker安装mysql</h4><p>1.下载mysql镜像</p><pre class=" language-shell"><code class="language-shell">docker pull mysql:5.6</code></pre><p>2.运行镜像</p><pre class=" language-shell"><code class="language-shell">docker run -p 3306:3306 --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6-e：带参数：设置root用户密码MYSQL_ROOT_PASSWORD=123456 </code></pre><p>指定mysql的一些配置参数</p><pre class=" language-shell"><code class="language-shell">docker run -p 3307:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis学习笔记</title>
      <link href="/xhnb.github.io/2020/09/26/mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/xhnb.github.io/2020/09/26/mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Mybatis入门"><a href="#一-Mybatis入门" class="headerlink" title="一.Mybatis入门"></a>一.Mybatis入门</h1><h2 id="1-什么是Mybatis"><a href="#1-什么是Mybatis" class="headerlink" title="1.什么是Mybatis"></a>1.什么是Mybatis</h2><pre><code>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。    MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain  Old Java Objects,普通的 Java对象)映射成数据库中的记录。</code></pre><h2 id="2-为什么要用Mybatis"><a href="#2-为什么要用Mybatis" class="headerlink" title="2.为什么要用Mybatis"></a>2.为什么要用Mybatis</h2><p>首先大家知道传统JDBC对数据库的操作：</p><blockquote><p>1.加载驱动<br>2.获取连接<br>3.获取预处理对象<br>4.执行SQL语句<br>5.获取结果集<br>6.释放资源</p></blockquote><p>而MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain  Old Java Objects,普通的 Java对象)映射成数据库中的记录。<br><strong>大家都知道ORM思想吗</strong></p><blockquote><p><strong>ORM：将关系数据库中表中的记录映射成为对象，以对象的形式展现，程序员可以把对数据库的操作转化为对对象的操作。（也就是数据库的表对应对象的名，表的字段对应对象的属性）</strong></p></blockquote><h2 id="3-Mybatis快速入门"><a href="#3-Mybatis快速入门" class="headerlink" title="3.Mybatis快速入门"></a>3.Mybatis快速入门</h2><p><strong>1.先通过maven创建一个普通项目，在pom.xml中配置相关jar包</strong><br><img src="https://img-blog.csdnimg.cn/20200428090815976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.现在我们可以先准备数据库中的表，程序中的实体类</strong><br><img src="https://img-blog.csdnimg.cn/20200428091631162.png" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Date <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>Date birthday<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"User&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", birthday="</span> <span class="token operator">+</span> birthday <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>3.配置mybatis主配置文件，映射配置文件</strong><br>主配置文件（SqlMapConfig.xml）和映射配置文件（UserDao.xml）放在main下的resource下</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE configuration        PUBLIC <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Mybatis主配置文件<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置环境 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>environments <span class="token keyword">default</span><span class="token operator">=</span><span class="token string">"mysql"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置mysql环境<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>environment id<span class="token operator">=</span><span class="token string">"mysql"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置事务的类型<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>transactionManager type<span class="token operator">=</span><span class="token string">"JDBC"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transactionManager<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置数据源（连接池）<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dataSource type<span class="token operator">=</span><span class="token string">"POOLED"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置连接数据库的<span class="token number">4</span>个基本信息<span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/mybatis"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"123456"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dataSource<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>environment<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>environments<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>指定映射配置文件的位置，映射配置文件是每个dao独立的配置文件<span class="token operator">--</span><span class="token operator">></span>   <span class="token operator">&lt;</span>mappers<span class="token operator">></span>       <span class="token operator">&lt;</span>mapper resource<span class="token operator">=</span><span class="token string">"com/baidu/dao/UserDao.xml"</span><span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>mappers<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper        PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.baidu.dao.UserDao"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置查询所有<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findAll"</span> resultType<span class="token operator">=</span><span class="token string">"com.baidu.domain.User"</span><span class="token operator">></span>        select <span class="token operator">*</span> from user    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre><blockquote><p>namespace:作用在哪儿个dao层接口<br>resultType:查询出来的结果封装在哪儿个实体类中</p></blockquote><p><strong>4.创建dao层的UserDao出来，Mybatis入门的准备配置的也差不多了，就可以测试了，在test编写测试类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.读取配置文件</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建SqlSessionFactory工厂</span>        SqlSessionFactoryBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.使用工厂生产SqlSession对象</span>        SqlSession session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.使用SqlSession创建Dao接口代理对象</span>        UserDao dao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.使用代理对象执行方法</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user<span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.释放资源</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>查询结果：</strong><br><img src="https://img-blog.csdnimg.cn/20200428093855916.png" alt="在这里插入图片描述"></p><h1 id="二-Mybatis进阶（xml配置）"><a href="#二-Mybatis进阶（xml配置）" class="headerlink" title="二.Mybatis进阶（xml配置）"></a>二.Mybatis进阶（xml配置）</h1><h2 id="单表操作"><a href="#单表操作" class="headerlink" title="单表操作"></a>单表操作</h2><p><strong>1.主配置文件</strong><br><strong><strong>细心地人会发现入门的配置代码还是有些许繁琐，这样我们对入门代码改进一下，并且认识新的标签</strong></strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE configuration        PUBLIC <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> properties标签 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>可以在内部配置数据库的信息，也可以通过属性引入外部配置信息        <span class="token number">1</span>：resource：用于指定配置文件的位置，是按照类路径写的，并且必须存在类路径下        <span class="token number">2</span><span class="token operator">:</span> url<span class="token operator">:</span>是要求按照url写法来写地址：协议<span class="token operator">+</span>主机<span class="token operator">+</span>端口<span class="token operator">+</span>URI     <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>properties resource<span class="token operator">=</span><span class="token string">"jdbcConfig.properties"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;amp;characterEncoding=utf8"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"123456"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span>typeAliases<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> typeAlias用于配置别名，type是实体类全限定类名，alias是别名，设置里别名不区分大小写 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token keyword">package</span>指定配置别名的包，当指定后，该包下的实体类都会注册别名，类名就是别名，不区分大小写<span class="token operator">--</span><span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>typeAlias type<span class="token operator">=</span><span class="token string">"com.baidu.domain.User"</span> alias<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>typeAlias<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">package</span> name<span class="token operator">=</span><span class="token string">"com.baidu.domain"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>typeAliases<span class="token operator">></span>    <span class="token operator">&lt;</span>environments <span class="token keyword">default</span><span class="token operator">=</span><span class="token string">"mysql"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>environment id<span class="token operator">=</span><span class="token string">"mysql"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>transactionManager type<span class="token operator">=</span><span class="token string">"JDBC"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transactionManager<span class="token operator">></span>            <span class="token operator">&lt;</span>dataSource type<span class="token operator">=</span><span class="token string">"POOLED"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"$&amp;#123;jdbc.driver&amp;#125;"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"$&amp;#123;jdbc.url&amp;#125;"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"$&amp;#123;jdbc.username&amp;#125;"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"$&amp;#123;jdbc.password&amp;#125;"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dataSource<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>environment<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>environments<span class="token operator">></span>    <span class="token operator">&lt;</span>mappers<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>mapper resource<span class="token operator">=</span><span class="token string">"com/baidu/dao/UserDao.xml"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token keyword">package</span>标签用于指定dao接口所在的包，当指定了，就不需要在写mapper以及resource和<span class="token keyword">class</span>了<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">package</span> name<span class="token operator">=</span><span class="token string">"com.baidu.dao"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>mappers<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span></code></pre><p><strong>外部配置文件：</strong><br><img src="https://img-blog.csdnimg.cn/20200428102403358.png" alt="在这里插入图片描述"></p><blockquote><p>properties ：通过引入外部配置文件来配置数据库信息，这样在改数据库时不用改代码，直接改配置文件，显得更方便<br>typeAliases：typeAlias用于配置别名，type是实体类全限定类名，alias是别名，设置里别名不区分大小写<br>typeAliases下的package：指定配置别名的包，当指定后，该包下的实体类都会注册别名，类名就是别名，不区分大小写<br>mappers下的package：用于指定dao接口所在的包，当指定了，就不需要在写mapper以及resource和class了</p></blockquote><p>2.<strong>在UserDao中增加几个操作数据库的方法，于是配置映射文件UserDao.xml进行单表操作</strong></p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>添加用户<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">"addUser"</span> parameterType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>        insert into <span class="token function">user</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span>birthday<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token function">values</span> <span class="token punctuation">(</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>birthday<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>sex<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>#<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>address<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>更新用户<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"updateUser"</span> parameterType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>        update user set username <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>birthday <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>birthday<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>sex <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>sex<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>address <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>address<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> where id <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>update<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>删除用户<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>delete id<span class="token operator">=</span><span class="token string">"deleteUser"</span> parameterType<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span><span class="token operator">></span>        delete from user where id <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>delete<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>根据id查询用户<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findById"</span> parameterType<span class="token operator">=</span><span class="token string">"int"</span> resultType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>        select <span class="token operator">*</span> from user where id <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>根据姓名模糊查询<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findByName"</span> parameterType<span class="token operator">=</span><span class="token string">"string"</span> resultType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>       select <span class="token operator">*</span> from user where username like #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><blockquote><p>parameterType：指定传入的参数类型<br>注意：#{}和${}区别<br>#{}：相当于占位符<br>${}：相当于字符串</p></blockquote><p><strong>3.单表操作中的动态SQL</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 根据给的条件查询所有<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findByCondition"</span> parameterType<span class="token operator">=</span><span class="token string">"user"</span> resultType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>select <span class="token operator">*</span> from user where <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"username != null"</span><span class="token operator">></span>            and username <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"address != null"</span><span class="token operator">></span>            and address like #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>address<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        select <span class="token operator">*</span> from user        <span class="token operator">&lt;</span>where<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"username != null"</span><span class="token operator">></span>                and username <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"address != null"</span><span class="token operator">></span>                and address like #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>address<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 根据QueryVo中的id集合查询对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findByInIds"</span> parameterType<span class="token operator">=</span><span class="token string">"queryVo"</span> resultType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>        select <span class="token operator">*</span> from user        <span class="token operator">&lt;</span>where<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"ids!=null and ids.size()>0"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"ids"</span> open<span class="token operator">=</span><span class="token string">"and id in("</span> close<span class="token operator">=</span><span class="token string">")"</span> item<span class="token operator">=</span><span class="token string">"id"</span> separator<span class="token operator">=</span><span class="token string">","</span><span class="token operator">></span>                    #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><blockquote><p>if标签: 当不确定传入的参数条件时，可以使用if标签进行拼接字符串 ，但是查询语句后要加where 1=1 这个恒成立的式子，<br>where标签:无需加where 1=1 ，where标签包含if标签更为方便<br>foreach标签：collection：集合，open：开始，close：结束，item：查询的参数，separator：分隔符</p></blockquote><h2 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h2><h4 id="1-多对一（mybatis中称之为一对一）"><a href="#1-多对一（mybatis中称之为一对一）" class="headerlink" title="1. 多对一（mybatis中称之为一对一）"></a>1. 多对一（mybatis中称之为一对一）</h4><p><strong>先再建立一个数据库表（account）和实体类（Account）</strong><br><img src="https://img-blog.csdnimg.cn/20200428104736570.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200428140353297.png" alt="在这里插入图片描述"><br>并生成相应的get/set方法，并重写toString方法<br><strong>配置映射文件AccountDao.xml</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.baidu.dao.AccountDao"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定义封装account和user的resultMap<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"accountUser"</span> type<span class="token operator">=</span><span class="token string">"account"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"id"</span> column<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>    <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"uid"</span> column<span class="token operator">=</span><span class="token string">"uid"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>    <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"money"</span> column<span class="token operator">=</span><span class="token string">"money"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>一对一的关系映射，配置封装user的内容<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>association property<span class="token operator">=</span><span class="token string">"user"</span> column<span class="token operator">=</span><span class="token string">"uid"</span> javaType<span class="token operator">=</span><span class="token string">"user"</span> select<span class="token operator">=</span><span class="token string">"com.baidu.dao.UserDao.findById"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>association<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 查询所有账户信息并带有用户信息<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findAll"</span>  resultMap<span class="token operator">=</span><span class="token string">"accountUser"</span> <span class="token operator">></span>        select <span class="token operator">*</span> from account    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>根据用户uid查询账户信息<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findByUid"</span> parameterType<span class="token operator">=</span><span class="token string">"int"</span> resultType<span class="token operator">=</span><span class="token string">"account"</span><span class="token operator">></span>        select <span class="token operator">*</span> from account where uid <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>uid<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre><blockquote><p>resultMap :封装结果。id：指定唯一标识，用来引用，type：封装的类型，property：对应的是实体类属性，column：对应的是表的列名<br>association ：一对一的关系映射，配置封装user的内容。javaType：封装的类型，select：查询user方法的全限定类名</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200428142647221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-一对多"><a href="#2-一对多" class="headerlink" title="2. 一对多"></a>2. 一对多</h4><p><img src="https://img-blog.csdnimg.cn/20200428142819412.png" alt="在这里插入图片描述"><br>生成相应的get/set方法，并重写toString方法<br><strong>配置映射文件UserDao.xml</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.baidu.dao.UserDao"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"userAccount"</span> type<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"id"</span> column<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"username"</span> column<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"address"</span> column<span class="token operator">=</span><span class="token string">"address"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"sex"</span> column<span class="token operator">=</span><span class="token string">"sex"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"birthday"</span> column<span class="token operator">=</span><span class="token string">"birthday"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置user对象中account集合映射<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>collection property<span class="token operator">=</span><span class="token string">"accounts"</span> ofType<span class="token operator">=</span><span class="token string">"account"</span> select<span class="token operator">=</span><span class="token string">"com.baidu.dao.AccountDao.findByUid"</span> column<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>collection<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>查询所有并且带有所有账户信息<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findAll"</span>  resultMap<span class="token operator">=</span><span class="token string">"userAccount"</span> <span class="token operator">></span>       select <span class="token operator">*</span> from user    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 根据id查询 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findById"</span> parameterType<span class="token operator">=</span><span class="token string">"int"</span> resultType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>         select <span class="token operator">*</span> from user where id <span class="token operator">=</span> #<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>uid<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre><blockquote><p>collection :配置user对象中account集合映射，property：实体类中的属性，ofType：集合中的对象类型，select：查询account的方法全限定类名</p></blockquote><p><strong><em>关于延迟加载：</em></strong></p><blockquote><p>延迟加载又叫按需加载，就是什么时候想要就什么时候查询。当一对一的时候，一般为立即加载，但是一对多时，当我们查询用户时，有时需要账户信息，有时不需要。在实际开发中，如果可以单表查询的东西绝不用多表去查询，因为单表查询性能会比多表查询性能要好。</p></blockquote><p><strong>所以当操作一对多时，就可以在主配置文件中打开延迟加载</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置参数：延迟加载<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>settings<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启mybatis支持延迟加载<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>setting name<span class="token operator">=</span><span class="token string">"lazyLoadingEnabled"</span> value<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>setting name<span class="token operator">=</span><span class="token string">"aggressiveLazyLoading"</span> value<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>settings<span class="token operator">></span></code></pre><h4 id="3-多对多"><a href="#3-多对多" class="headerlink" title="3. 多对多"></a>3. 多对多</h4><p>多对多关系映射：两表互相包含对方实体的集合<br>多对多本质上和一对多差不多，需要互相配置</p><p><strong>如果你能跟着上述步骤做完，你的Mybatis也算入门了，这只是我的一个小小学习记录，并不是什么教学，希望大家如果进来就点个赞吧！</strong></p>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Alibaba Sentinel</title>
      <link href="/xhnb.github.io/2020/09/26/SpringCloud-Alibaba-Sentinel/"/>
      <url>/xhnb.github.io/2020/09/26/SpringCloud-Alibaba-Sentinel/</url>
      
        <content type="html"><![CDATA[<p>@[TOC](Sentinel: 分布式系统的流量防卫兵)</p><h1 id="一-Sentinel简介"><a href="#一-Sentinel简介" class="headerlink" title="一.Sentinel简介"></a>一.Sentinel简介</h1><ul><li><a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">Sentinel中文官网</a></li></ul><blockquote><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p></blockquote><p>说白了，就是对SpringCloud Hystrix进一步的优化，大多数是参照Hystrix的核心理念的，前面我们也<a href="https://blog.csdn.net/weixin_44757206/article/details/106781467">详解了Hystrix</a>，对本篇博客理解有很大的帮助</p><p><strong>Sentinel 具有以下特征:</strong></p><ul><li><strong>丰富的应用场景：</strong> Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等</li><li><strong>完备的实时监控：</strong> Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况</li><li><strong>广泛的开源生态：</strong> Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel</li><li><strong>完善的 SPI 扩展点：</strong> Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等</li></ul><p><strong>Sentinel 的主要特性：</strong><br><img src="https://img-blog.csdnimg.cn/20200704074715537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>Sentinel 分为两个部分:</strong></p><ul><li><strong>核心库（Java 客户端）：</strong> 不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持</li><li><strong>控制台（Dashboard）：</strong> 基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器<h1 id="二-Sentinel安装与使用"><a href="#二-Sentinel安装与使用" class="headerlink" title="二.Sentinel安装与使用"></a>二.Sentinel安装与使用</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><a href="https://github.com/alibaba/Sentinel/releases">官网下载</a><br>由于官网下载巨慢，所以我为大家准备了，请自取<br>链接：<a href="https://pan.baidu.com/s/1I6QzjrHSHQ9J5d516njdzg">https://pan.baidu.com/s/1I6QzjrHSHQ9J5d516njdzg</a><br>提取码：30bj<h2 id="2-启动"><a href="#2-启动" class="headerlink" title="2.启动"></a>2.启动</h2>前提：java8环境ok、8080端口不能被占用<br>进入下载好的目录，打开cmd，输入命令<code>java -jar sentinel-dashboard-1.7.1.jar</code>启动Sentinel即可<br><img src="https://img-blog.csdnimg.cn/20200704093845266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="3-登录"><a href="#3-登录" class="headerlink" title="3.登录"></a>3.登录</h2>浏览器输入：<code>localhost:8080</code>，即可访问<br><img src="https://img-blog.csdnimg.cn/20200704094247110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>默认账号密码都是sentinel，登录成功，安装完成！<br><img src="https://img-blog.csdnimg.cn/20200704094337258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="4-初始化演示工程"><a href="#4-初始化演示工程" class="headerlink" title="4.初始化演示工程"></a>4.初始化演示工程</h2></li><li>先创建一个工程，让sentinel可以检测到</li></ul><p>pom.xml:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入自己的定义的包--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baidu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>project.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--nacos--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- sentinel做持久化配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入sentinel--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入OpenFeign--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入web相关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--其他基础配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>application.yml:</p><pre class=" language-yml"><code class="language-yml">server:  port: 8401spring:  application:    name: cloudalibaba-sentinel-service  cloud:    nacos:      discovery:        server-addr: localhost:8848 #Nacos服务注册中心地址    sentinel:      transport:        dashboard: localhost:8080 #配置Sentinel dashboard地址        port: 8719management:  endpoints:    web:      exposure:        include: '*'</code></pre><p>主启动类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp8401</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MainApp8401<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>业务类controller：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowLimitController</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"------testA"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"------testB"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>启动测试<br>测试工程<br><img src="https://img-blog.csdnimg.cn/20200704102944222.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020070410300240.png" alt="在这里插入图片描述"><br>可以看到sentinel已经对8401的工程进行监控<br><img src="https://img-blog.csdnimg.cn/20200704103055473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h1 id="三-Sentinel规则"><a href="#三-Sentinel规则" class="headerlink" title="三.Sentinel规则"></a>三.Sentinel规则</h1><h2 id="1-流控规则"><a href="#1-流控规则" class="headerlink" title="1.流控规则"></a>1.流控规则</h2><p><img src="https://img-blog.csdnimg.cn/20200704115446383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>1.资源名：</strong> 唯一名称，默认请求路径，表示对该资源进行流控<br><strong>2. 针对来源：</strong> Sentinel可以针对调用者进行限流，填写微服务名，默认default（不区分来源）<br><strong>3. 阈值类型/单击阈值：</strong></p><ul><li>QPS（每秒钟的请求数量）：当调用该api的QPS达到阈值时，进行限流</li><li>线程数：当调用该线程数达到阈值的时候，进行限流</li></ul><p><strong>4.是否集群：不需要集群</strong><br><strong>5.流控模式：</strong></p><ul><li><strong>直接：</strong> api达到限流条件时，直接限流</li><li><strong>关联：</strong> 当关联的资源达到阈值时，就限流自己</li><li><strong>链路：</strong> 只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【api级别的针对来源】</li></ul><p><strong>6.流控效果：</strong></p><ul><li><strong>快速失败：</strong> 直接失败，抛异常</li><li><strong>Warm Up：</strong> 根据codeFactor（冷加载因子，默认3）的值，从阈值/codeFctor，经过预热时长，才达到设置的QPS阈值</li><li><strong>排队等待：</strong> 匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS，否则无效</li></ul><p><strong>下面就详细解释流控模式和流控效果</strong></p><h3 id="1-1-流控模式"><a href="#1-1-流控模式" class="headerlink" title="1.1 流控模式"></a>1.1 流控模式</h3><h4 id="①直接"><a href="#①直接" class="headerlink" title="①直接"></a>①直接</h4><p><strong>直接：</strong> api达到限流条件时，直接限流<br><img src="https://img-blog.csdnimg.cn/20200704123605343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个时候如果在一秒内快速点击/testA，就会发现直接调用了默认的报错信息<br><img src="https://img-blog.csdnimg.cn/20200704142325679.png" alt="在这里插入图片描述"><br><strong>关于QPS和线程数的解释：</strong></p><blockquote><p>QPS是每秒钟的请求数量，而线程数是每秒钟的线程数。<br>举个银行的例子，银行要受理业务，如果按QPS来说，就是每秒让1个客户进门受理，按线程数来说，就是每秒可以让很多客户进门并且办理业务，但是银行只开了1个窗口办理业务</p></blockquote><h4 id="②关联"><a href="#②关联" class="headerlink" title="②关联"></a>②关联</h4><p><strong>关联：</strong> 当关联的资源达到阈值时，就限流自己<br>举个例子，淘宝的流程是先下订单，后支付，所以如果当支付接口承受不了高并发的压力，就会让订单接口限流，这样都得到了缓解<br><img src="https://img-blog.csdnimg.cn/20200704144519722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用jmeter模拟并发访问testB<br><img src="https://img-blog.csdnimg.cn/20200704145749635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候访问testA，已经被限流了<br><img src="https://img-blog.csdnimg.cn/20200704145827103.png" alt="在这里插入图片描述"></p><h4 id="③链路"><a href="#③链路" class="headerlink" title="③链路"></a>③链路</h4><p><strong>链路：</strong> 只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【api级别的针对来源】<br>上面的话不太好理解，实际上，链路的控制指的就是对一条链路的访问进行控制，比方说a—&gt;b—&gt;是一条链路，假设我以a为入口资源，d为终点资源，对这条链路进行限制的话，则资源a,b,d均会被限制访问。<br><img src="https://img-blog.csdnimg.cn/2020070415172769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200704151951401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时1秒内快速点击testA，会触发限流</p><h3 id="1-2-流控效果"><a href="#1-2-流控效果" class="headerlink" title="1.2 流控效果"></a>1.2 流控效果</h3><h4 id="①快速失败"><a href="#①快速失败" class="headerlink" title="①快速失败"></a>①快速失败</h4><p><strong>快速失败：</strong> 直接失败，抛异常，默认的流控处理，上述全部是快速失败的例子，就不多说了</p><h4 id="②Warm-Up"><a href="#②Warm-Up" class="headerlink" title="②Warm Up"></a>②Warm Up</h4><p><strong>Warm Up：</strong> 即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过“冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮<br><strong>应用场景：</strong> 秒杀系统在开启的瞬间，会有很多流量上来，很有可能把系统打死，预热方式就是为了保护系统，可以慢慢的把流量放进来，慢慢的把阈值增长为设置的阈值<br><strong>公式：</strong> 默认coldFactor为3，即请求QPS从设定的阈值/3开始，经预热时长逐渐升至设定的QPS阈值<br><img src="https://img-blog.csdnimg.cn/2020070415475259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试得到，快速点击testA，一开始点击3次，会限流，等预热后，没有限流了，因为手速就跟不上1秒6次啦，哈哈</p><h4 id="③排队等待"><a href="#③排队等待" class="headerlink" title="③排队等待"></a>③排队等待</h4><p> <strong>排队等待：</strong>  匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS，否则无效</p><blockquote><p>匀速排队方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。<br>这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020070416152428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>为了测试观察方便，在testB方法中加入日志打印，方便观察</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"testB..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"------testB"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>用postman发送请求<br><img src="https://img-blog.csdnimg.cn/20200704162423681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看看后台日志打印，说明是排队等待的效果！<br><img src="https://img-blog.csdnimg.cn/20200704162556395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-降级规则"><a href="#2-降级规则" class="headerlink" title="2.降级规则"></a>2.降级规则</h2><h3 id="2-1-RT（平均响应时间）"><a href="#2-1-RT（平均响应时间）" class="headerlink" title="2.1 RT（平均响应时间）"></a>2.1 RT（平均响应时间）</h3><p> <strong>平均响应时间：</strong> 当==1s内持续进入5个请求，且对应请求的平均响应时间（秒级）均超过阈值==，那么在接下来的时间窗口期内，对该方法的调用都会自动的熔断。注意Sentinel默认统计的RT上限是4900ms，超出此阈值的都会算作4900ms，若需要更改上限可以通过启动配置项<code>-Dcsp.sentinel.statistic.max.rt=xxx</code>来配置</p><p> 后台加个/testC的方法，设置睡眠1秒，这样响应时间就超过阈值了</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testC"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"------test降级RT"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200704171333246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用jmeter测试并发访问<br><img src="https://img-blog.csdnimg.cn/20200704171908254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>测试结论：</strong> 永远1秒钟打进来10个请求（大于5个请求了）去调用testC，并且平均响应时间大于200ms，则在未来的5s内，断路器打开，微服务不可用，停止jmeter，断路器关闭，微服务恢复正常</p><h3 id="2-2-异常比例"><a href="#2-2-异常比例" class="headerlink" title="2.2 异常比例"></a>2.2 异常比例</h3><p><strong>异常比例：</strong> 当资源的每秒请求大于5，并且每秒异常总数占通过量的比值超过阈值之后，资源进入降级状态，在接下来的时间窗口内，对该方法的调用都会自动的返回。异常的比例在[0.1，1.0]<br><img src="https://img-blog.csdnimg.cn/20200704173231679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将testC的方法制造一个运行异常</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testC"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"------test降级异常比例"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>测试结论：</strong> 单独访问一次，必然页面会返回一个error page（运行异常），调用一次，错一次；开启jmeter，直接高并发请求，多次调用达到我们的配置条件，也就是超过了异常比例的阈值，断路器就开启了，微服务不能用，不在是报错页面了，而是服务降级<br><img src="https://img-blog.csdnimg.cn/20200704173809708.png" alt="在这里插入图片描述"></p><h3 id="2-3-异常数"><a href="#2-3-异常数" class="headerlink" title="2.3 异常数"></a>2.3 异常数</h3><p><strong>异常数：</strong> 当资源近1分钟的异常数超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若时间小于60s，则结束熔断状态后仍可能再进入熔断状态<br><img src="https://img-blog.csdnimg.cn/20200704174310280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试结论：在1分钟以内，点击3次/testC后，再次点击就会返回降级页面，之前3次返回的是错误页面，进入熔断，70s后，断路器关闭，微服务恢复</p><h2 id="3-热点key规则"><a href="#3-热点key规则" class="headerlink" title="3.热点key规则"></a>3.热点key规则</h2><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的数据，并对其访问进行限制。比如：</p><ul><li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li><li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li></ul><p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p><p>后端代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testHotKey"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testHotKey"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"block_testHotKey"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testHotKey</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p1"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>String p1<span class="token punctuation">,</span>                             <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p2"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>String p2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"testHotKey...."</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">block_testHotKey</span><span class="token punctuation">(</span>String p1<span class="token punctuation">,</span> String p2<span class="token punctuation">,</span> BlockException exception<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"啊哦，testHotKey被限流了..."</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><ul><li>@SentinelResource注解和Hystrix中的@HystrixCommand类似，之前的案例，限流、降级出问题了，都是用的sentinel默认的提示信息，这个注解就是类似hystrix的注解，自定义兜底方法，某个方法出问题，就找对应的兜底方法<br>value = “testHotKey”：就是该资源的唯一标识，blockHandler = “block_testHotKey”：就是兜底方法</li><li>@RequestParam(value = “p1”,required = false)：springboot中的注解，对请求参数的设置，required = false设置参数为不必须，参数可有可无</li><li>block_testHotKey(String p1, String p2, BlockException exception)：兜底方法要有原方法的参数，且含有BlockException</li></ul></blockquote><p>sentinel配置：<br><img src="https://img-blog.csdnimg.cn/20200704182008482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试结果：可以看到当我们访问/testHotKey的时候带上p1参数时，每秒超过1次，就会触发限流，并且走的是我们自定义的兜底方法，不是之前sentinel自带的<br><strong>注：</strong> 带p1和p2也会触发限流，只带p2不会触发，所以只要参数含有p1就会触发限流<br><img src="https://img-blog.csdnimg.cn/20200704182351224.gif" alt="在这里插入图片描述"><br><strong>添加参数例外项：</strong><br>特殊情况：我们期望p1参数当它是某个特殊值时，它的限流值和平时不一样<br><img src="https://img-blog.csdnimg.cn/20200704184039125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>1.参数类型：参数的类型必须是基本类型和String<br>2.参数值：就是你需要配置的参数例外<br>3.限流阈值：参数例外项重新改为这个阈值</p></blockquote><h2 id="4-系统规则"><a href="#4-系统规则" class="headerlink" title="4.系统规则"></a>4.系统规则</h2><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的 load、CPU 使用率、平均 RT、入口 QPS 和并发线程数等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。<br>系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量生效。入口流量指的是进入应用的流量（EntryType.IN），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p><p>系统规则支持以下的模式：</p><ul><li><strong>Load 自适应（仅对 Linux/Unix-like 机器生效）</strong>：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps * minRt 估算得出。设定参考值一般是 CPU cores * 2.5。</li><li><strong>CPU usage（1.5.0+ 版本）</strong>：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul><p>说白了，我们之前的配置限流、熔断降级等是不是都是精确在某个路径上或者某个方法上，而系统规则是建立在整个系统上</p><p><strong>配置全局QPS让你们体会一下：</strong><br><img src="https://img-blog.csdnimg.cn/20200704190032236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试效果：可以看到，配置了全局的入口QPS后，无论是testA，还是testB都是每秒1次，超过阈值就限流<br><img src="https://img-blog.csdnimg.cn/20200704190211235.gif" alt="在这里插入图片描述"></p><h1 id="四-SentinelResource注解的详细使用"><a href="#四-SentinelResource注解的详细使用" class="headerlink" title="四.@SentinelResource注解的详细使用"></a>四.@SentinelResource注解的详细使用</h1><h2 id="1-按资源名称限流-后续处理"><a href="#1-按资源名称限流-后续处理" class="headerlink" title="1.按资源名称限流+后续处理"></a>1.按资源名称限流+后续处理</h2><p>业务类controller：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitController</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/byResource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byResource"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"handleException"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CommonResult <span class="token function">byResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"按资源名称限流测试OK"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>2020L<span class="token punctuation">,</span><span class="token string">"serial001"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> CommonResult <span class="token function">handleException</span><span class="token punctuation">(</span>BlockException exception<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span>exception<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 服务不可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>sentinel配置：<br><img src="https://img-blog.csdnimg.cn/20200704201527957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试结果：走的自定义的blockHandler<br><img src="https://img-blog.csdnimg.cn/20200704201716672.gif" alt="在这里插入图片描述"></p><h2 id="2-按照Url地址限流-后续处理"><a href="#2-按照Url地址限流-后续处理" class="headerlink" title="2.按照Url地址限流+后续处理"></a>2.按照Url地址限流+后续处理</h2><p>==通过访问的URL来限流，会返回Sentinel自带默认的限流处理信息==<br>业务类controller：</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/byUrl"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byUrl"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CommonResult <span class="token function">byUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"按url限流测试OK"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>2020L<span class="token punctuation">,</span> <span class="token string">"serial002"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>sentinel配置：<br><img src="https://img-blog.csdnimg.cn/20200704202526153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试结果：通过访问的URL来限流，会返回Sentinel自带默认的限流处理信息</p><h2 id="3-客户自定义限流处理逻辑"><a href="#3-客户自定义限流处理逻辑" class="headerlink" title="3.客户自定义限流处理逻辑"></a>3.客户自定义限流处理逻辑</h2><p><strong>上面兜底方法面临的问题?</strong><br>1.系统默认的，没有体现我们自己的业务要求<br>2.依照现有条件，我们自定义的处理方法又和业务代码耦合在一起，不直观<br>3.每个业务代码都添加一个兜底的，那代码膨胀加剧<br>4.全局统一的处理方法没有体现<br><strong>所以我们要自定义限流处理逻辑</strong></p><p>创建customerBlockHandler类用于自定义限流处理逻辑：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerBlockHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CommonResult <span class="token function">handleException</span><span class="token punctuation">(</span>BlockException exception<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 服务不可用"</span><span class="token operator">+</span><span class="token string">"handleException---1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CommonResult <span class="token function">handleException2</span><span class="token punctuation">(</span>BlockException exception<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 服务不可用"</span><span class="token operator">+</span><span class="token string">"handleException---2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>controller：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/customerBlockHandler"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"customerBlockHandler"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//自定义只对资源名有效，url走的还是系统默认的</span>            blockHandlerClass <span class="token operator">=</span> CustomerBlockHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            blockHandler <span class="token operator">=</span> <span class="token string">"handleException2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CommonResult <span class="token function">customerBlockHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"按客戶自定义"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>2020L<span class="token punctuation">,</span><span class="token string">"serial003"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><ul><li>自定义只对资源名有效，url走的还是系统默认的</li><li>blockHandlerClass = CustomerBlockHandler.class,<pre><code>     blockHandler = &quot;handleException2&quot;</code></pre>指定自定义的类和方法，就可以找到兜底方法</li></ul></blockquote><p>sentinel配置：<br><img src="https://img-blog.csdnimg.cn/20200704203515580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试结果：<br><img src="https://img-blog.csdnimg.cn/20200704203608181.gif" alt="在这里插入图片描述"></p><h1 id="五-服务熔断功能"><a href="#五-服务熔断功能" class="headerlink" title="五.服务熔断功能"></a>五.服务熔断功能</h1><p><strong>sentinel整合ribbon：</strong></p><ul><li>先创建两个服务提供者9003、9004</li></ul><p>pom.xml:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--SpringCloud ailibaba nacos --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baidu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>project.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- SpringBoot整合Web组件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--日常通用jar包配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>application.yml:</p><pre class=" language-yml"><code class="language-yml">server:  port: 9003spring:  application:    name: nacos-payment-provider  cloud:    nacos:      discovery:        server-addr: localhost:8848 #配置Nacos地址management:  endpoints:    web:      exposure:        include: '*'</code></pre><p>主启动类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain9003</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>PaymentMain9003<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>业务类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;server.port&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Payment<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span><span class="token string">"28a8c1e3bc2742d8848569891fb42181"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span><span class="token string">"bba8c1e3bc2742d8848569891ac32182"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span><span class="token string">"6ua8c1e3bc2742d8848569891xt92183"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/paymentSQL/&amp;#123;id&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">paymentSQL</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Payment payment <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"from mysql,serverPort:  "</span><span class="token operator">+</span>serverPort<span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>创建消费服务者84</li></ul><p>pom.xml:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baidu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>project.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>application.yml:</p><pre class=" language-yml"><code class="language-yml">server:  port: 84spring:  application:    name: nacos-order-consumer  cloud:    nacos:      discovery:        server-addr: localhost:8848    sentinel:      transport:        dashboard: localhost:8080        port: 8719service-url:  nacos-user-service: http://nacos-payment-provider#对Feign的支持feign:  sentinel:    enabled: true</code></pre><p>主启动类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderNacosMain84</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderNacosMain84<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>配置类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>业务类controller：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleBreakerController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SERVICE_URL <span class="token operator">=</span> <span class="token string">"http://nacos-payment-provider"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> PaymentService paymentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/fallback/&amp;#123;id&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// @SentinelResource(value = "fallback",fallback = "handlerFallback")//fallback只负责业务异常</span>    <span class="token comment" spellcheck="true">// @SentinelResource(value = "fallback",blockHandler = "blockHandler")//blockHandler只负责sentinel配置出错</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token string">"handlerFallback"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//两个都配置，如果都出错，会进入blockHandler</span>    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Long id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>SERVICE_URL <span class="token operator">+</span> <span class="token string">"/paymentSQL/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> CommonResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">(</span><span class="token string">"IllegalArgumentException,非法参数异常...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span> <span class="token punctuation">(</span><span class="token string">"NullPointerException,该ID没有对应记录,空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//fallback = "handlerFallback"</span>    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">handlerFallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Long id<span class="token punctuation">,</span>Throwable e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Payment payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"运行异常，handlerFallback，exception内容："</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//blockHandler = "blockHandler"</span>    <span class="token keyword">public</span> CommonResult<span class="token operator">&lt;</span>Payment<span class="token operator">></span> <span class="token function">blockHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Long id<span class="token punctuation">,</span> BlockException e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Payment payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">455</span><span class="token punctuation">,</span><span class="token string">"运行异常，blockHandler，BlockException："</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>fallback只负责业务异常<br>blockHandler只负责sentinel配置出错<br>两个都配置，如果都出错，会进入blockHandler</p></blockquote><p>sentinel配置：<br><img src="https://img-blog.csdnimg.cn/20200704205559389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试效果：<br>可以看到，正常访问，会有负载均衡的效果，id=4、5时抛异常走的自定义的fallback方法，快速点击，走的是自定义的blockHandler方法<br><img src="https://img-blog.csdnimg.cn/20200704210559112.gif" alt="在这里插入图片描述"></p><h1 id="六-Sentinel的规则持久化"><a href="#六-Sentinel的规则持久化" class="headerlink" title="六.Sentinel的规则持久化"></a>六.Sentinel的规则持久化</h1><p><strong>前面所有讲解过程有个重要问题：</strong><br>一旦我们重启应用，Sentinel规则将消失，生产环境需要将配置规则进行持久化！<br><strong>怎么配置：</strong><br>将限流配置规则持久化进Nacos保存，只要刷新8401某个rest地址，sentinel控制台的流控规则就能看到，只要Nacos里面的配置不删除，针对8401上Sentinel上的流控规则持续有效<br><strong>配置8401：</strong><br>pom.xml:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>application.yml:</p><pre class=" language-yml"><code class="language-yml">server:  port: 8401spring:  application:    name: cloudalibaba-sentinel-service  cloud:    nacos:      discovery:        server-addr: localhost:8848 #Nacos服务注册中心地址    sentinel:      transport:        dashboard: localhost:8080 #配置Sentinel dashboard地址        port: 8719      datasource:        ds1:          nacos:            server-addr: localhost:8848            dataId: cloudalibaba-sentinel-service            groupId: DEFAULT_GROUP            data-type: json            rule-type: flowmanagement:  endpoints:    web:      exposure:        include: '*'feign:  sentinel:    enabled: true # 激活Sentinel对Feign的支持</code></pre><p>添加Nacos业务规则配置<br><img src="https://img-blog.csdnimg.cn/20200704211418944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-yml"><code class="language-yml">[    &#123;         "resource": "/byUrl",         "limitApp": "default",         "grade":   1,         "count":   1,         "strategy": 0,         "controlBehavior": 0,         "clusterMode": false        &#125;]</code></pre><blockquote><p>resource：资源名称<br>limitApp：来源应用<br>grade：阈值类型，0代表线程数，1代表QPS<br>count：单击阈值<br>strategy：流控模式，0代表直接，1代表关联，2代表链路<br>controlBehavior：流控效果，0代表快速失败，1代表Warm Up，2代表排队等待<br>clusterMode：是否集群</p></blockquote><p><strong>经过上述配置，关闭8401服务，再重启，刷新sentinel，发现流控规则已经持久化！</strong></p><p>   <strong>至此，强大的SpringCloud Alibaba Sentinel就跟各位介绍完了，只是个人的一个学习笔记，记录一下分享给大家，有什么不对的地方，希望朋友们指出~~</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会Mybatis了还不会用Mybatis-Plus?</title>
      <link href="/xhnb.github.io/2020/09/26/%E4%BC%9AMybatis%E4%BA%86%E8%BF%98%E4%B8%8D%E4%BC%9A%E7%94%A8Mybatis-Plus/"/>
      <url>/xhnb.github.io/2020/09/26/%E4%BC%9AMybatis%E4%BA%86%E8%BF%98%E4%B8%8D%E4%BC%9A%E7%94%A8Mybatis-Plus/</url>
      
        <content type="html"><![CDATA[<p>@<a href="Mybatis-Plus:为简化开发而生">TOC</a></p><h1 id="一-Mybatis-Plus简介"><a href="#一-Mybatis-Plus简介" class="headerlink" title="一.Mybatis-Plus简介"></a>一.Mybatis-Plus简介</h1><h2 id="1-Mybatis-Plus是什么？"><a href="#1-Mybatis-Plus是什么？" class="headerlink" title="1.Mybatis-Plus是什么？"></a>1.Mybatis-Plus是什么？</h2><blockquote><ul><li><strong>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生</strong></li></ul></blockquote><p><strong>愿景：</strong></p><blockquote><ul><li><strong>我们的愿景是成为 MyBatis 最好的搭档，就像 魂斗罗 中的 1P、2P，基友搭配，效率翻倍。</strong><br><img src="https://img-blog.csdnimg.cn/20200602184815538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><p>==<strong>简单来说，Mybatis用来简化JDBC，不用再去写JDBC代码和手动设置参数以及获取结果集；而Mybatis-Plus简化了Mybatis，不用再去写简单的crud的mapper映射配置文件</strong>==</p><p><strong>可以进入<a href="https://mp.baomidou.com/">Mybatis-Plus官网</a>了解更多详细知识，自主学习</strong></p><h2 id="2-Mybatis-Plus特性"><a href="#2-Mybatis-Plus特性" class="headerlink" title="2.Mybatis-Plus特性"></a>2.Mybatis-Plus特性</h2><ul><li><strong>无侵入：</strong> 只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小：</strong> 启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作：</strong> 内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用：</strong> 通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成：</strong> 支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式：</strong> 支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作<br>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器：</strong> 采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件：</strong> 基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询<br>分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件：</strong> 可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件：</strong> 提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作<h1 id="二-Mybatis-Plus快速入门"><a href="#二-Mybatis-Plus快速入门" class="headerlink" title="二.Mybatis-Plus快速入门"></a>二.Mybatis-Plus快速入门</h1><h2 id="1-快速入门案例"><a href="#1-快速入门案例" class="headerlink" title="1.快速入门案例"></a>1.快速入门案例</h2></li></ul><p><strong>创建springboot项目并引入Mybatis-Plus测试相关依赖：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--mysql 驱动--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--lombok--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mybatis-plus--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>application.yml配置：</strong></p><pre class=" language-yml"><code class="language-yml">#连接数据库spring:  datasource:    username: root    password: 123456    url: jdbc:mysql:///mybatis-plus?characterEncoding=UTF-8&serverTimezone=GMT%2b8    driver-class-name: com.mysql.cj.jdbc.Driver#控制台打印sql语句logging:  level:    com.baidu.mybatisplus.mapper: debug</code></pre><p><strong>实体类：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token comment" spellcheck="true">//lombok自动生成set/get，以及toString等方法</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>持久层Mapper：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><ul><li>持久层接口只需继承BaseMapper ，就可以实现基本的crud操作，并不需要配置mybatis中的映射文件，SQL语句</li></ul></blockquote><p><strong>再在springboot启动类加上注解扫描mapper包就可以测试了@MapperScan(“com.baidu.mybatisplus.mapper”)</strong><br><strong>测试：</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Autowired</span>    UserMapper userMapper<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历users</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020060220332295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><ul><li>只需要继承一个BaseMapper，就拥有crud方法，岂不是美哉？</li></ul></blockquote><h2 id="2-CRUD操作"><a href="#2-CRUD操作" class="headerlink" title="2.CRUD操作"></a>2.CRUD操作</h2><h3 id="（1）增加"><a href="#（1）增加" class="headerlink" title="（1）增加"></a>（1）增加</h3><h4 id="测试插入数据"><a href="#测试插入数据" class="headerlink" title="测试插入数据"></a>测试插入数据</h4><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//测试插入数据</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"老徐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"2222@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有设置id,但是id自动生成了</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>结果：</strong><br><img src="https://img-blog.csdnimg.cn/20200602204140799.png" alt="在这里插入图片描述"></p><blockquote><ul><li><strong><em>为什么我们没有设置主键，他还是生成了，并且特别长？</em></strong></li></ul></blockquote><h4 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h4><blockquote><ul><li>Mybatis-Plus默认生成主键，并且默认使用雪花算法生成全局唯一id</li></ul></blockquote><p><strong>我们可以在实体类上添加注解设置主键生成策略</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     *  AUTO(0), 数据库id自增     *  NONE(1), 未设置主键     *  INPUT(2), 手动输入     *  ID_WORKER(3), 默认的，全局唯一id     *  UUID(4), 全局唯一id：uuid     *  ID_WORKER_STR(5); ID_WORKER 字符串表示法     */</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span></code></pre><h3 id="（2）更新"><a href="#（2）更新" class="headerlink" title="（2）更新"></a>（2）更新</h3><h4 id="自动填充策略"><a href="#自动填充策略" class="headerlink" title="自动填充策略"></a>自动填充策略</h4><p><strong>在实际开发中，往往会在数据库中添加create_time，update_time，用来记录向数据库中插入和更新时的时间，所以就用到了自动填充策略</strong><br><strong>handler/MyMetaObjectHandler：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入时填充策略</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start insert fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新时填充策略</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start update fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>实体类字段：</strong></p><pre class=" language-java"><code class="language-java">     <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//插入时自动填充字段</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//插入和更新时插入字段</span>    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span></code></pre><h4 id="测试更新"><a href="#测试更新" class="headerlink" title="测试更新"></a>测试更新</h4><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//测试更新数据</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>5L<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"王老五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200602210511446.png" alt="在这里插入图片描述"></p><h3 id="（3）查询"><a href="#（3）查询" class="headerlink" title="（3）查询"></a>（3）查询</h3><h4 id="测试查询"><a href="#测试查询" class="headerlink" title="测试查询"></a>测试查询</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试查询数据</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>8L<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//批量查询</span>       <span class="token comment" spellcheck="true">/* List&lt;User> users = userMapper.selectBatchIds(Arrays.asList(1, 2, 3));        for (User user:users)&amp;#123;            System.out.println(user);        &amp;#125;*/</span>       <span class="token comment" spellcheck="true">//复杂条件查询可以使用map</span>       <span class="token comment" spellcheck="true">/* Map&lt;String, Object> map = new HashMap&lt;>();        map.put("name","徐浩");        List&lt;User> users = userMapper.selectByMap(map);        users.forEach(System.out::println);*/</span>        <span class="token comment" spellcheck="true">//分页查询</span>        <span class="token comment" spellcheck="true">/*Page&lt;User> page = new Page&lt;>(1,5);        userMapper.selectPage(page, null);        page.getRecords().forEach(System.out::println);*/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="分页查询插件"><a href="#分页查询插件" class="headerlink" title="分页查询插件"></a>分页查询插件</h4><blockquote><ul><li>Mybatis-Plus有分页插件，有了分页插件，就不会像以前分页查询那么麻烦</li></ul></blockquote><p><strong>config/MybatisPlusConfig：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.baidu.mybatisplus.mapper"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从启动类上移动到这来</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//分页插件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>测试：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分页查询</span>        Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：<br><img src="https://img-blog.csdnimg.cn/20200602211615905.png" alt="在这里插入图片描述"></p><h3 id="（4）删除"><a href="#（4）删除" class="headerlink" title="（4）删除"></a>（4）删除</h3><h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4><blockquote><ul><li>物理删除是从数据库真正删除数据记录，而在开发过程中，更多使用的是逻辑删除，那什么是逻辑删除呢？</li><li>逻辑删除就是不真正的从数据库删除记录，而是通过修改数据库的一个deleted字段，从而使该数据失效</li></ul></blockquote><p><strong>config/MybatisPlusConfig：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.baidu.mybatisplus.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//分页插件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//逻辑删除组件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>application.yml：</strong></p><pre class=" language-yml"><code class="language-yml">#设置逻辑删除值mybatis-plus:  global-config:    db-config:      logic-delete-value: 1 #删除后的值      logic-not-delete-value: 0 #未删除的值</code></pre><p><strong>实体类字段：</strong></p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@TableLogic</span> <span class="token comment" spellcheck="true">//逻辑删除</span>    <span class="token keyword">private</span> Integer deleted<span class="token punctuation">;</span></code></pre><p><strong>测试：</strong><br>先查询某个用户：</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200602212653861.png" alt="在这里插入图片描述"><br>然后逻辑删除该用户</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试删除数据</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200602212920843.png" alt="在这里插入图片描述"></p><blockquote><ul><li>逻辑删除实际上一个更新的语句</li></ul></blockquote><p>数据库deleted字段已变成1<br><img src="https://img-blog.csdnimg.cn/2020060221302147.png" alt="在这里插入图片描述"><br>最后查询1号用户时空的<br><img src="https://img-blog.csdnimg.cn/20200602213204753.png" alt="在这里插入图片描述"></p><h1 id="三-Mybatis-Plus扩展"><a href="#三-Mybatis-Plus扩展" class="headerlink" title="三.Mybatis-Plus扩展"></a>三.Mybatis-Plus扩展</h1><h2 id="条件构造器（Wrapper）"><a href="#条件构造器（Wrapper）" class="headerlink" title="条件构造器（Wrapper）"></a>条件构造器（Wrapper）</h2><p><img src="https://img-blog.csdnimg.cn/20200602220428459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>官网的例子很多且详细，可以去官网详细了解，我测试几个方法给大家演示一下，注意观察打印的SQL语句</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试比较的</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testEq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询名字是小王，年龄大于5岁的</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"小王"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200602220902896.png" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//测试between</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBetween</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询年龄在20-30之间的</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200602220957732.png" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//测试like模糊查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询email为t开头的，名字中含有a</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper                <span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span><span class="token string">"t"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// t%</span>                <span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// %a%</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200602221100452.png" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试Null的判断</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询email不为空，年龄大于20的</span>        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper                <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200602221149713.png" alt="在这里插入图片描述"><br><strong>更多的方法自行去官网学习<del>~</del></strong><br><strong>总而言之：Mybatis-Plus不仅帮助我们封装了简单的crud方法，还有很多好用的插件，总之大大简化了我们的开发过程！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/xhnb.github.io/2020/09/26/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/xhnb.github.io/2020/09/26/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Spring是什么？"><a href="#一-Spring是什么？" class="headerlink" title="一.Spring是什么？"></a>一.Spring是什么？</h1><blockquote><p>spring是一个轻量级的IOC和AOP容器框架。是为Java应用程序提供基础性服务的一套框架，目的是用于简化企业应用程序的开发，它使得开发者只需要关心业务需求。</p></blockquote><h2 id="1-Spring的优点"><a href="#1-Spring的优点" class="headerlink" title="1.Spring的优点"></a><strong>1.Spring的优点</strong></h2><ul><li><strong>方便解耦，简化开发 （高内聚低耦合）</strong><br>Spring就是一个大工厂（容器），可以将所有对象创建和依赖关系维护交给Spring管理<ul><li><strong>AOP编程的支持</strong><br>Spring提供面向切面编程，支持将一些通用任务，如安全、事务、日志、权限等进行集中式管理，从而提供更好的复用</li><li><strong>声明式事务的支持</strong><br>只需要通过配置就可以完成对事务的管理，而无需手动编程方便程序的测试</li><li><strong>Spring对Junit4支持</strong><br>可以通过注解方便的测试Spring程序方便集成各种优秀框架</li><li><strong>Spring不排斥各种优秀的开源框架</strong><br>其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz等）的直接支持</li><li><strong>降低JavaEE API的使用难度</strong><br>Spring 对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低<h1 id="二-Spring框架—IOC-控制反转"><a href="#二-Spring框架—IOC-控制反转" class="headerlink" title="二.Spring框架—IOC(控制反转)"></a>二.Spring框架—IOC(控制反转)</h1><h2 id="1-什么是IOC？"><a href="#1-什么是IOC？" class="headerlink" title="1.什么是IOC？"></a>1.什么是IOC？</h2></li></ul></li></ul><blockquote><p>把创建对象交给spring框架来完成</p></blockquote><p><strong>IOC(控制反转)理解：</strong><br><strong>（1）</strong> IOC就是控制反转，是指创建对象的控制权的转移，以前创建对象的主动权和时机是由自己把控的，而现在这种权力转移到Spring容器中，并由容器根据配置文件去创建实例和管理各个实例之间的依赖关系，对象与对象之间松散耦合，也利于功能的复用<br><strong>（2）</strong> 最直观的表达就是，IOC让对象的创建不用去new了，可以由spring自动生产，使用java的反射机制，根据配置文件在运行时动态的去创建对象以及管理对象，并调用对象的方法的。<br><strong>（3）</strong> Spring的IOC有三种注入方式 ：构造器注入、setter方法注入、根据注解注入。</p><h2 id="2-什么是DI-Dependency-Injection-依赖注入-？"><a href="#2-什么是DI-Dependency-Injection-依赖注入-？" class="headerlink" title="2.什么是DI(Dependency Injection  依赖注入)？"></a>2.什么是DI(Dependency Injection  依赖注入)？</h2><p><strong>DI(Dependency Injection  依赖注入)理解：</strong><br>spring这个容器中，替你管理着一系列的类，前提是你需要将这些类交给spring容器进行管理，然后在你需要的时候，不是自己去定义，而是直接向spring容器索取，当spring容器知道你的需求之后，就会去它所管理的组件中进行查找，然后直接给你所需要的组件.<br>==实现IOC思想需要DI做支持==</p><h2 id="3-IOC案列（xml配置）"><a href="#3-IOC案列（xml配置）" class="headerlink" title="3.IOC案列（xml配置）"></a>3.IOC案列（xml配置）</h2><h4 id="3-1-使用IOC创建对象的3种方式"><a href="#3-1-使用IOC创建对象的3种方式" class="headerlink" title="3.1 使用IOC创建对象的3种方式"></a>3.1 使用IOC创建对象的3种方式</h4><p><strong>3.1.1 使用默认构造函数创建（常用）</strong></p><blockquote><p>在spring配置文件中使用bean标签，并配以id，class属性，且没有其他标签和属性时，采用的就是默认构造函数创建bean对象，如果类中没有默认构造函数，则无法创建</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"accountService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.baidu.service.impl.AccountServiceImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200501204256595.png" alt="在这里插入图片描述"><br><strong>3.1.2 使用普通工厂中的方法创建</strong></p><blockquote><p>我们需要的类可能存在于jar包中，无法使用默认构造函数方法创建对象时，可以使用普通工厂的方法创建（使用某个类中的方法创建对象，并保存到spring容器中）</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"instanceFactory"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.baidu.factory.instanceFactory"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"accountService"</span> factory<span class="token operator">-</span>bean<span class="token operator">=</span><span class="token string">"inatanceFactory"</span> factory<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"getAccountService"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p><strong>3.1.3 使用工厂中的静态方法创建</strong></p><blockquote><p>使用类中的静态方法创建对象，并存入spring容器</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"accountService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.baidu.factory.staticFactory"</span> factory<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"getAccountService"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><h4 id="3-2-依赖注入的3种方式"><a href="#3-2-依赖注入的3种方式" class="headerlink" title="3.2 依赖注入的3种方式"></a>3.2 依赖注入的3种方式</h4><p><strong>3.2.1 构造函数注入</strong><br>实现类中要有构造函数：<br><img src="https://img-blog.csdnimg.cn/20200501210641940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>spring配置文件：<br><img src="https://img-blog.csdnimg.cn/20200501210739801.png" alt="在这里插入图片描述"></p><p><strong>3.2.2 set方法注入</strong><br>实现类中要有对应对象或属性的set方法：<br><img src="https://img-blog.csdnimg.cn/2020050121100031.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>spring配置文件：<br><img src="https://img-blog.csdnimg.cn/20200501211152168.png" alt="在这里插入图片描述"><br> ==关于集合数据的注入：==<br>程序类中：<img src="https://img-blog.csdnimg.cn/20200501211500492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1NzIwNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>spring配置文件：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注入集合数据 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"accountService3"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.baidu.service.impl.AccountServiceImpl3"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"str"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>array<span class="token operator">></span>               <span class="token operator">&lt;</span>value<span class="token operator">></span>aaa<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>               <span class="token operator">&lt;</span>value<span class="token operator">></span>bbb<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>               <span class="token operator">&lt;</span>value<span class="token operator">></span>ccc<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>array<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"map"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>map<span class="token operator">></span>              <span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"xh"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>entry<span class="token operator">></span>              <span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"age"</span> value<span class="token operator">=</span><span class="token string">"15"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>entry<span class="token operator">></span>              <span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"sex"</span> value<span class="token operator">=</span><span class="token string">"男"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>entry<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>map<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"set"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>set<span class="token operator">></span>               <span class="token operator">&lt;</span>value<span class="token operator">></span>aa<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>               <span class="token operator">&lt;</span>value<span class="token operator">></span>bb<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>               <span class="token operator">&lt;</span>value<span class="token operator">></span>cc<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"list"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>list<span class="token operator">></span>                <span class="token operator">&lt;</span>value<span class="token operator">></span>q<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>                <span class="token operator">&lt;</span>value<span class="token operator">></span>w<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>                <span class="token operator">&lt;</span>value<span class="token operator">></span>e<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>                <span class="token operator">&lt;</span>value<span class="token operator">></span>r<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"pro"</span><span class="token operator">></span>           <span class="token operator">&lt;</span>props<span class="token operator">></span>               <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span>aaa<span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>               <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"B"</span><span class="token operator">></span>bbb<span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>           <span class="token operator">&lt;</span><span class="token operator">/</span>props<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p><strong>3.2.3 注解注入</strong><br>使用注解需要在spring配置文件中加：</p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 容器创建时扫描该包下所有的注解<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.baidu"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span></code></pre><blockquote><p>Component:<br>作用：把当前类对象存入spring容器<br>属性：value：用于指定bean的id，默认是该类名首字母小写<br>Controller：一般用在表现层<br>Service：一般用在业务层<br>Repository：一般用在持久层<br>这三个注解和Component作用属性一模一样<br>他们是spring为我们提供的明确三层使用的注解，使我们对三层对象更加清晰</p></blockquote><blockquote><p> 1.@Autowired<br>      *       自动注入数据 根据数据类型找已存入spring容器中的bean对象<br>      *       如果存在多个相同的对象，那就按照变量名找<br>      * 2.@Autowired<br>      *   @Qualifier(“accountDao1”)<br>      *       @Qualifier(“accountDao1”)指定注入数据到哪儿个对象，但在类对象上不能单独使用，需要和@Autowired同时使用，他可以在传入方法参数时单独使用<br>      * 3.@Resource(name = “accountDao1”)<br>      *       @Resource(name = “accountDao1”)可以指定注入数据到哪儿个对象，并且可以单独使用，使用name属性<br>      * 4.@Value<br>      *       用于注入基本类型和String类型<br>      * 5.集合类型不能通过注解方式注入，只能通过xml方式注入</p></blockquote><h4 id="3-3-bean元素进阶-scope属性-生命周期属性"><a href="#3-3-bean元素进阶-scope属性-生命周期属性" class="headerlink" title="3.3 bean元素进阶(scope属性   生命周期属性)"></a>3.3 bean元素进阶(scope属性   生命周期属性)</h4><p><strong>3.3.1 scope属性</strong></p><ul><li><strong>singleton：</strong><br>默认，每个容器中只有一个bean的实例，单例的模式由BeanFactory自身来维护。</li><li><strong>prototype：</strong><br>为每一个bean请求提供一个实例。</li><li><strong>request:</strong><br>Web环境下,对象与request生命周期一致    </li><li><strong>session:</strong><br>Web环境下,对象与session生命周期一致</li><li><strong>global-session：全局作用域</strong><br>global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。全局作用域与Servlet中的session作用域效果相同。</li></ul><p><strong>3.3.2 生命周期属性—–初始化和销毁</strong><br>(1)配置一个方法作为生命周期初始化方法,spring会在对象创建之后立刻调用 init-method<br>(2)配置一个方法作为生命周期的销毁方法,spring容器在关闭并销毁所有容器中的对象之前调用destory-method</p><h2 id="Spring整合Junit单元测试"><a href="#Spring整合Junit单元测试" class="headerlink" title="Spring整合Junit单元测试"></a>Spring整合Junit单元测试</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用Junit单元测试：测试我们的配置 * Spring整合junit的配置 *      1、导入spring整合junit的jar(坐标) *      2、使用Junit提供的一个注解把原有的main方法替换了，替换成spring提供的 *             @Runwith *      3、告知spring的运行器，spring和ioc创建是基于xml还是注解的，并且说明位置 *          @ContextConfiguration *                  locations：指定xml文件的位置，加上classpath关键字，表示在类路径下 *                  classes：指定注解类所在地位置 * *   当我们使用spring 5.x版本的时候，要求junit的jar必须是4.12及以上 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:bean.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AccountService service<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Account account <span class="token operator">:</span> accounts<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="三-Spring框架—AOP-面向切面编程"><a href="#三-Spring框架—AOP-面向切面编程" class="headerlink" title="三.Spring框架—AOP(面向切面编程)"></a>三.Spring框架—AOP(面向切面编程)</h1><h2 id="1-什么是AOP？"><a href="#1-什么是AOP？" class="headerlink" title="1.什么是AOP？"></a>1.什么是AOP？</h2><blockquote><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP（面向对象编程）的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。</p></blockquote><ul><li>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</li><li>AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码</li><li>经典应用：事务管理、性能监视、安全检查、缓存 、日志等<h2 id="2-AOP的术语"><a href="#2-AOP的术语" class="headerlink" title="2.AOP的术语"></a>2.AOP的术语</h2></li><li>**JoinPoint(连接点)**：目标对象中,所有可以增强的方法</li><li>**Pointcut(切入点)**：目标对象中,已经被增强的方法</li><li><strong>Advice(通知/增强)</strong> ：增强方法的代码、想要的功能</li><li>**Target(目标对象)**：被代理对象，被通知的对象，被增强的类对象</li><li>**Weaving(织入)**：是指把增强advice应用到目标对象target来创建新的代理对象proxy的过程.</li><li>**Proxy(代理)**：将通知织入到目标对象之后形成的代理对象</li><li>==<strong>aspect(切面)</strong>==：是切入点pointcut和通知advice的结合</li></ul><h2 id="3-AOP实现小案例（打印日志）"><a href="#3-AOP实现小案例（打印日志）" class="headerlink" title="3.AOP实现小案例（打印日志）"></a>3.AOP实现小案例（打印日志）</h2><p>service层（业务层）：相当于 <strong>Target(目标对象)</strong><br>而这里面的所有方法都叫 <strong>JoinPoint(连接点)</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountServiceDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存账户成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*int i = 3/0;*/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新账户成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除账户成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>logger类：里面的所有方法就是<strong>Advice(通知/增强)</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用于打印日志：计划让其在切入点方法执行之前执行（切入点方法就是业务层方法）     */</span>    <span class="token comment" spellcheck="true">/**     * 前置通知     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforePrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知Logger类中的beforePrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 后置通知     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturningPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知Logger类中的afterReturningPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 异常通知     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowingPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知Logger类中的afterThrowingPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 最终通知     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知Logger类中的afterPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>spring的配置文件：<br>先把两个对象在spring容器中创建出来</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"accountService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.baidu.service.impl.AccountServiceDaoImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"logger"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.baidu.logger.Logger"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>然后进行AOP配置</p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置AOP<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置切入点表达式<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut id<span class="token operator">=</span><span class="token string">"pt"</span> expression<span class="token operator">=</span><span class="token string">"execution(* com.baidu.service.impl.*.*(..))"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置切面 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspect id<span class="token operator">=</span><span class="token string">"logAdvice"</span> ref<span class="token operator">=</span><span class="token string">"logger"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置通知的类型，并且建立通知方法和切入点方法的关联<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置前置通知：在切入点方法执行之前执行<span class="token operator">--</span><span class="token operator">></span>             <span class="token operator">&lt;</span>aop<span class="token operator">:</span>before method<span class="token operator">=</span><span class="token string">"beforePrintLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>before<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>after<span class="token operator">-</span>returning method<span class="token operator">=</span><span class="token string">"afterReturningPrintLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>after<span class="token operator">-</span>returning<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>after<span class="token operator">-</span>throwing method<span class="token operator">=</span><span class="token string">"afterThrowingPrintLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>after<span class="token operator">-</span>throwing<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置最终通知：无论切入点方法是否正常执行它都会在其后面执行<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>after method<span class="token operator">=</span><span class="token string">"afterPrintLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>after<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置环绕通知 详细的注释请看Logger类中            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>around method<span class="token operator">=</span><span class="token string">"aroundPringLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>around<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspect<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span></code></pre><blockquote><p>切入点表达式的写法：<br>                   关键字：execution(表达式)<br>                   表达式：<br>                       访问修饰符  返回值  包名.包名.包名…类名.方法名(参数列表)</p></blockquote><p>测试类： accountService中的saveAccount()方法相当于<strong>Pointcut(切入点)</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AOPTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AccountServiceDao accountService <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">,</span>AccountServiceDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountService<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200501223325299.png" alt="在这里插入图片描述"></p><h1 id="四-Spring中的事务控制"><a href="#四-Spring中的事务控制" class="headerlink" title="四.Spring中的事务控制"></a>四.Spring中的事务控制</h1><h4 id="1-什么是事务"><a href="#1-什么是事务" class="headerlink" title="1.什么是事务"></a>1.什么是事务</h4><blockquote><p> 事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。也就是事务具有原子性，一个事务中的一系列的操作要么全部成功，要么一个都不做。</p></blockquote><h4 id="2-事务的四大特性"><a href="#2-事务的四大特性" class="headerlink" title="2.事务的四大特性"></a>2.事务的四大特性</h4><blockquote><p>⑴ 原子性（Atomicity）<br>　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><p>⑵ 一致性（Consistency）<br>　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p><p>⑶ 隔离性（Isolation）<br>　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><p>　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p><p>⑷ 持久性（Durability）<br>　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><p>　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p></blockquote><h4 id="3-spring中的事务控制案例（转账）"><a href="#3-spring中的事务控制案例（转账）" class="headerlink" title="3.spring中的事务控制案例（转账）"></a>3.spring中的事务控制案例（转账）</h4><p><strong>案例准备：</strong><br><strong>pom.xml:</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>jdbc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>tx<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>aspectj<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aspectjweaver<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.8</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.12</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><p><strong>dao层（持久层）：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 账户的持久层实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">JdbcDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from account where id = ?"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> accounts<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>null<span class="token operator">:</span>accounts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountByName</span><span class="token punctuation">(</span>String accountName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from account where name = ?"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>accountName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>accounts<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>accounts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"结果集不唯一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> accounts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"update account set name=?,money=? where id=?"</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>service层（业务层）：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 账户的业务层实现类 * * 事务控制应该都是在业务层 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccountDao</span><span class="token punctuation">(</span>IAccountDao accountDao<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountDao <span class="token operator">=</span> accountDao<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span>accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String sourceName<span class="token punctuation">,</span> String targetName<span class="token punctuation">,</span> Float money<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转账了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.1根据名称查询转出账户</span>            Account source <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>sourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.2根据名称查询转入账户</span>            Account target <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.3转出账户减钱</span>            source<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.4转入账户加钱</span>            target<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.5更新转出账户</span>            accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//int i=1/0;模拟转账出现问题</span>            <span class="token comment" spellcheck="true">//2.6更新转入账户</span>            accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>bean.xml（spring配置文件）：</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xmlns<span class="token operator">:</span>tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx<span class="token operator">/</span>spring<span class="token operator">-</span>tx<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置业务层<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"accountService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.baidu.service.impl.AccountServiceImpl"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"accountDao"</span> ref<span class="token operator">=</span><span class="token string">"accountDao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置账户的持久层<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"accountDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.baidu.dao.impl.AccountDaoImpl"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置数据源<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/spring"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"123456"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置事务管理器<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置事务的通知<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>tx<span class="token operator">:</span>advice id<span class="token operator">=</span><span class="token string">"txAdvice"</span> transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置事务的属性                isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。                propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。                read<span class="token operator">-</span>only：用于指定事务是否只读。只有查询方法才能设置为<span class="token boolean">true</span>。默认值是<span class="token boolean">false</span>，表示读写。                timeout：用于指定事务的超时时间，默认值是<span class="token operator">-</span><span class="token number">1</span>，表示永不超时。如果指定了数值，以秒为单位。                rollback<span class="token operator">-</span><span class="token keyword">for</span>：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。                no<span class="token operator">-</span>rollback<span class="token operator">-</span><span class="token keyword">for</span>：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"find*"</span> propagation<span class="token operator">=</span><span class="token string">"SUPPORTS"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>method<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>advice<span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut id<span class="token operator">=</span><span class="token string">"pt"</span> expression<span class="token operator">=</span><span class="token string">"execution(* com.baidu.service.impl.*.*(..))"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>建立切入点表达式和事务通知的对应关系 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>advisor advice<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"txAdvice"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>advisor<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><p><strong>测试：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:bean.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span>  IAccountService as<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        as<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">100f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>没有异常的结果：转账成功<br><img src="https://img-blog.csdnimg.cn/20200501230034771.png" alt="在这里插入图片描述"><br>在service实现类中打开int=3/0的注解，就模拟了转账异常，再看运行结果：<br><img src="https://img-blog.csdnimg.cn/20200501230257570.png" alt="在这里插入图片描述"></p><p>由此可见，如果没有事务控制，那么就会发生错误，也就是aaa账户出了100，但是bbb账户没有收到100。</p>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
